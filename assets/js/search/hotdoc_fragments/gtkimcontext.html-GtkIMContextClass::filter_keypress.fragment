fragment_downloaded_cb({"url": "gtkimcontext.html#GtkIMContextClass::filter_keypress", "fragment": "filter_keypress \nfilter_keypress \nfilter_keypress \nCalled via Gtk.prototype.filter_keypress on every key press or release event. Every non trivial input method needs to override this in order to implement the mapping from key events to text. A return value of true indicates to the caller that the event was consumed by the input method. In that case the commit signal should be emitted upon completion of a key sequence to pass the resulting text back to the input widget. Alternatively false may be returned to indicate that the event wasn t handled by the input method. If a builtin mapping exists for the key it is used to produce a character. \nParameters \nCalled via Gtk.IMContext.filter_keypress on every key press or release event. Every non trivial input method needs to override this in order to implement the mapping from key events to text. A return value of True indicates to the caller that the event was consumed by the input method. In that case the commit signal should be emitted upon completion of a key sequence to pass the resulting text back to the input widget. Alternatively False may be returned to indicate that the event wasn t handled by the input method. If a builtin mapping exists for the key it is used to produce a character. \nParameters \nCalled via gtk_im_context_filter_keypress on every key press or release event. Every non trivial input method needs to override this in order to implement the mapping from key events to text. A return value of TRUE indicates to the caller that the event was consumed by the input method. In that case the commit signal should be emitted upon completion of a key sequence to pass the resulting text back to the input widget. Alternatively FALSE may be returned to indicate that the event wasn t handled by the input method. If a builtin mapping exists for the key it is used to produce a character. \nParameters \n"});