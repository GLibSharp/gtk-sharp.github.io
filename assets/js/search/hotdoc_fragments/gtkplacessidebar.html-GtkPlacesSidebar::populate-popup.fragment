fragment_downloaded_cb({"url": "gtkplacessidebar.html#GtkPlacesSidebar::populate-popup", "fragment": "populate popup \npopulate popup \npopulate popup \nThe places sidebar emits this signal when the user invokes a contextual popup on one of its items. In the signal handler the application may add extra items to the menu as appropriate. For example a file manager may want to add a Properties command to the menu. \nIt is not necessary to store the selected_item for each menu item during their callbacks the application can use Gtk.prototype.get_location to get the file to which the item refers. \nThe selected_item argument may be null in case the selection refers to a volume. In this case selected_volume will be non NULL. In this case the calling application will have to GObject.prototype.ref the selected_volume and keep it around to use it in the callback. \nThe container and all its contents are destroyed after the user dismisses the popup. The popup is re created and thus this signal is emitted every time the user activates the contextual menu. \nBefore the container always was a Gtk.Menu and you were expected to add your items as Gtk.MenuItem. Since the popup may be implemented as a Gtk.Popover in which case container will be something else e.g. a Gtk.Box to which you may add Gtk.ModelButton or other widgets such as GtkEntries Gtk.SpinButton etc. If your application can deal with this situation you can set GtkPlacesSidebar populate all to true to request that this signal is emitted for populating popovers as well. \nParameters \na Gtk.Menu or another Gtk.Container \nGio.File with the item to which the popup should refer or null in the case of a selected_volume. \nGio.Volume if the selected item is a volume or null if it is a file. \nFlags Run First \nSince \nThe places sidebar emits this signal when the user invokes a contextual popup on one of its items. In the signal handler the application may add extra items to the menu as appropriate. For example a file manager may want to add a Properties command to the menu. \nIt is not necessary to store the selected_item for each menu item during their callbacks the application can use Gtk.PlacesSidebar.get_location to get the file to which the item refers. \nThe selected_item argument may be None in case the selection refers to a volume. In this case selected_volume will be non NULL. In this case the calling application will have to GObject.Object.ref the selected_volume and keep it around to use it in the callback. \nThe container and all its contents are destroyed after the user dismisses the popup. The popup is re created and thus this signal is emitted every time the user activates the contextual menu. \nBefore the container always was a Gtk.Menu and you were expected to add your items as Gtk.MenuItem. Since the popup may be implemented as a Gtk.Popover in which case container will be something else e.g. a Gtk.Box to which you may add Gtk.ModelButton or other widgets such as GtkEntries Gtk.SpinButton etc. If your application can deal with this situation you can set GtkPlacesSidebar populate all to True to request that this signal is emitted for populating popovers as well. \nParameters \na Gtk.Menu or another Gtk.Container \nGio.File with the item to which the popup should refer or None in the case of a selected_volume. \nGio.Volume if the selected item is a volume or None if it is a file. \nFlags Run First \nSince \nThe places sidebar emits this signal when the user invokes a contextual popup on one of its items. In the signal handler the application may add extra items to the menu as appropriate. For example a file manager may want to add a Properties command to the menu. \nIt is not necessary to store the selected_item for each menu item during their callbacks the application can use gtk_places_sidebar_get_location to get the file to which the item refers. \nThe selected_item argument may be NULL in case the selection refers to a volume. In this case selected_volume will be non NULL. In this case the calling application will have to g_object_ref the selected_volume and keep it around to use it in the callback. \nThe container and all its contents are destroyed after the user dismisses the popup. The popup is re created and thus this signal is emitted every time the user activates the contextual menu. \nBefore the container always was a GtkMenu and you were expected to add your items as GtkMenuItem. Since the popup may be implemented as a GtkPopover in which case container will be something else e.g. a GtkBox to which you may add GtkModelButton or other widgets such as GtkEntries GtkSpinButton etc. If your application can deal with this situation you can set GtkPlacesSidebar populate all to TRUE to request that this signal is emitted for populating popovers as well. \nParameters \na GtkMenu or another GtkContainer \nGFile with the item to which the popup should refer or NULL in the case of a selected_volume. \nGVolume if the selected item is a volume or NULL if it is a file. \nFlags Run First \nSince \n"});