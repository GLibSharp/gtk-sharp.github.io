fragment_downloaded_cb({"url": "gtkbuilder.html#gtk_builder_connect_signals", "fragment": "gtk_builder_connect_signals \nGtk.Builder.connect_signals \nGtk.prototype.connect_signals \nThis method is a simpler variation of gtk_builder_connect_signals_full. It uses symbols explicitly added to builder with prior calls to gtk_builder_add_callback_symbol. In the case that symbols are not explicitly added it uses GModule s introspective features by opening the module NULL to look at the application s symbol table. From here it tries to match the signal handler names given in the interface description with symbols in the application and connects the signals. Note that this function can only be called once subsequent calls will do nothing. \nNote that unless gtk_builder_add_callback_symbol is called for all signal callbacks which are referenced by the loaded XML this function will require that GModule be supported on the platform. \nIf you rely on GModule support to lookup callbacks in the symbol table the following details should be noted \nWhen compiling applications for Windows you must declare signal callbacks with G_MODULE_EXPORT or they will not be put in the symbol table. On Linux and Unices this is not necessary applications should instead be compiled with the Wl export dynamic CFLAGS and linked against gmodule export \nParameters \na GtkBuilder \nuser data to pass back with all signals \nSince \nThis method is a simpler variation of Gtk.Builder.connect_signals_full. It uses symbols explicitly added to builder with prior calls to Gtk.Builder.add_callback_symbol. In the case that symbols are not explicitly added it uses GModule.Module s introspective features by opening the module None to look at the application s symbol table. From here it tries to match the signal handler names given in the interface description with symbols in the application and connects the signals. Note that this function can only be called once subsequent calls will do nothing. \nNote that unless Gtk.Builder.add_callback_symbol is called for all signal callbacks which are referenced by the loaded XML this function will require that GModule.Module be supported on the platform. \nIf you rely on GModule.Module support to lookup callbacks in the symbol table the following details should be noted \nWhen compiling applications for Windows you must declare signal callbacks with G_MODULE_EXPORT not introspectable or they will not be put in the symbol table. On Linux and Unices this is not necessary applications should instead be compiled with the Wl export dynamic CFLAGS and linked against gmodule export \nParameters \na Gtk.Builder \nuser data to pass back with all signals \nSince \nThis method is a simpler variation of Gtk.prototype.connect_signals_full. It uses symbols explicitly added to builder with prior calls to Gtk.prototype.add_callback_symbol. In the case that symbols are not explicitly added it uses GModule.Module s introspective features by opening the module null to look at the application s symbol table. From here it tries to match the signal handler names given in the interface description with symbols in the application and connects the signals. Note that this function can only be called once subsequent calls will do nothing. \nNote that unless Gtk.prototype.add_callback_symbol is called for all signal callbacks which are referenced by the loaded XML this function will require that GModule.Module be supported on the platform. \nIf you rely on GModule.Module support to lookup callbacks in the symbol table the following details should be noted \nWhen compiling applications for Windows you must declare signal callbacks with G_MODULE_EXPORT not introspectable or they will not be put in the symbol table. On Linux and Unices this is not necessary applications should instead be compiled with the Wl export dynamic CFLAGS and linked against gmodule export \nParameters \na Gtk.Builder \nuser data to pass back with all signals \nSince \n"});