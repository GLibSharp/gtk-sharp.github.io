fragment_downloaded_cb({"url": "gtkmain.html#gtk_main_do_event", "fragment": "gtk_main_do_event \nGtk.main_do_event \nprototype.main_do_event \nProcesses a single GDK event. \nThis is public only to allow filtering of events between GDK and GTK You will not usually need to call this function directly. \nWhile you should not call this function directly you might want to know how exactly events are handled. So here is what this function does with the event \nCompress enter leave notify events. If the event passed build an enter leave pair together with the next event peeked from GDK both events are thrown away. This is to avoid a backlog of de highlighting widgets crossed by the pointer. \nFind the widget which got the event. If the widget can t be determined the event is thrown away unless it belongs to a INCR transaction. \nThen the event is pushed onto a stack so you can query the currently handled event with gtk_get_current_event. \nThe event is sent to a widget. If a grab is active all events for widgets that are not in the contained in the grab widget are sent to the latter with a few exceptions \nAfter finishing the delivery the event is popped from the event stack. \nParameters \nAn event to process normally passed by GDK \nProcesses a single GDK event. \nThis is public only to allow filtering of events between GDK and GTK You will not usually need to call this function directly. \nWhile you should not call this function directly you might want to know how exactly events are handled. So here is what this function does with the event \nCompress enter leave notify events. If the event passed build an enter leave pair together with the next event peeked from GDK both events are thrown away. This is to avoid a backlog of de highlighting widgets crossed by the pointer. \nFind the widget which got the event. If the widget can t be determined the event is thrown away unless it belongs to a INCR transaction. \nThen the event is pushed onto a stack so you can query the currently handled event with Gtk.get_current_event. \nThe event is sent to a widget. If a grab is active all events for widgets that are not in the contained in the grab widget are sent to the latter with a few exceptions \nAfter finishing the delivery the event is popped from the event stack. \nParameters \nAn event to process normally passed by GDK \nProcesses a single GDK event. \nThis is public only to allow filtering of events between GDK and GTK You will not usually need to call this function directly. \nWhile you should not call this function directly you might want to know how exactly events are handled. So here is what this function does with the event \nCompress enter leave notify events. If the event passed build an enter leave pair together with the next event peeked from GDK both events are thrown away. This is to avoid a backlog of de highlighting widgets crossed by the pointer. \nFind the widget which got the event. If the widget can t be determined the event is thrown away unless it belongs to a INCR transaction. \nThen the event is pushed onto a stack so you can query the currently handled event with prototype.get_current_event. \nThe event is sent to a widget. If a grab is active all events for widgets that are not in the contained in the grab widget are sent to the latter with a few exceptions \nAfter finishing the delivery the event is popped from the event stack. \nParameters \nAn event to process normally passed by GDK \n"});