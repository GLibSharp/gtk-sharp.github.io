fragment_downloaded_cb({"url": "gtkclipboard.html#gtk_clipboard_wait_is_rich_text_available", "fragment": "gtk_clipboard_wait_is_rich_text_available \nGtk.Clipboard.wait_is_rich_text_available \nGtk.prototype.wait_is_rich_text_available \nTest to see if there is rich text available to be pasted This is done by requesting the TARGETS atom and checking if it contains any of the supported rich text targets. This function waits for the data to be received using the main loop so events timeouts etc may be dispatched during the wait. \nThis function is a little faster than calling gtk_clipboard_wait_for_rich_text since it doesn t need to retrieve the actual text. \nParameters \na GtkClipboard \na GtkTextBuffer \nTRUE is there is rich text available FALSE otherwise. \nSince \nTest to see if there is rich text available to be pasted This is done by requesting the TARGETS atom and checking if it contains any of the supported rich text targets. This function waits for the data to be received using the main loop so events timeouts etc may be dispatched during the wait. \nThis function is a little faster than calling Gtk.Clipboard.wait_for_rich_text since it doesn t need to retrieve the actual text. \nParameters \na Gtk.Clipboard \na Gtk.TextBuffer \nTrue is there is rich text available False otherwise. \nSince \nTest to see if there is rich text available to be pasted This is done by requesting the TARGETS atom and checking if it contains any of the supported rich text targets. This function waits for the data to be received using the main loop so events timeouts etc may be dispatched during the wait. \nThis function is a little faster than calling Gtk.prototype.wait_for_rich_text since it doesn t need to retrieve the actual text. \nParameters \na Gtk.Clipboard \na Gtk.TextBuffer \ntrue is there is rich text available false otherwise. \nSince \n"});