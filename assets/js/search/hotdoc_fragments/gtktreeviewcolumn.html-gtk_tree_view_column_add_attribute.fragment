fragment_downloaded_cb({"url": "gtktreeviewcolumn.html#gtk_tree_view_column_add_attribute", "fragment": "Gtk.TreeViewColumn.add_attribute \ngtk_tree_view_column_add_attribute \nGtk.prototype.add_attribute \nAdds an attribute mapping to the list in tree_column. The column is the column of the model to get a value from and the attribute is the parameter on cell_renderer to be set from the value. So for example if column of the model contains strings you could have the text attribute of a Gtk.CellRendererText get its values from column \nParameters \nA Gtk.TreeViewColumn. \nthe Gtk.CellRenderer to set attributes on \nAn attribute on the renderer \nThe column position on the model to get the attribute from. \nAdds an attribute mapping to the list in tree_column. The column is the column of the model to get a value from and the attribute is the parameter on cell_renderer to be set from the value. So for example if column of the model contains strings you could have the text attribute of a GtkCellRendererText get its values from column \nParameters \nA GtkTreeViewColumn. \nthe GtkCellRenderer to set attributes on \nAn attribute on the renderer \nThe column position on the model to get the attribute from. \nAdds an attribute mapping to the list in tree_column. The column is the column of the model to get a value from and the attribute is the parameter on cell_renderer to be set from the value. So for example if column of the model contains strings you could have the text attribute of a Gtk.CellRendererText get its values from column \nParameters \nA Gtk.TreeViewColumn. \nthe Gtk.CellRenderer to set attributes on \nAn attribute on the renderer \nThe column position on the model to get the attribute from. \n"});