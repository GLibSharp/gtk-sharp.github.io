fragment_downloaded_cb({"url": "gtkapplication-h.html#gtk_application_new", "fragment": "gtk_application_new \nGtk.prototype.new \nGtk.Application.new \nCreates a new GtkApplication instance. \nWhen using GtkApplication it is not necessary to call gtk_init manually. It is called as soon as the application gets registered as the primary instance. \nConcretely gtk_init is called in the default handler for the startup signal. Therefore GtkApplication subclasses should chain up in their startup handler before using any GTK API. \nNote that commandline arguments are not passed to gtk_init. All GTK functionality that is available via commandline arguments can also be achieved by setting suitable environment variables such as G_DEBUG so this should not be a big problem. If you absolutely must support GTK commandline arguments you can explicitly call gtk_init before creating the application instance. \nIf non NULL the application ID must be valid. See g_application_id_is_valid. \nIf no application ID is given then some features most notably application uniqueness will be disabled. A null application ID is only allowed with GTK or later. \nParameters \nThe application ID. \nthe application flags \na new GtkApplication instance \nSince \nCreates a new Gtk.Application instance. \nWhen using Gtk.Application it is not necessary to call prototype.init manually. It is called as soon as the application gets registered as the primary instance. \nConcretely prototype.init is called in the default handler for the startup signal. Therefore Gtk.Application subclasses should chain up in their startup handler before using any GTK API. \nNote that commandline arguments are not passed to prototype.init. All GTK functionality that is available via commandline arguments can also be achieved by setting suitable environment variables such as G_DEBUG so this should not be a big problem. If you absolutely must support GTK commandline arguments you can explicitly call prototype.init before creating the application instance. \nIf non NULL the application ID must be valid. See Gio.prototype.id_is_valid. \nIf no application ID is given then some features most notably application uniqueness will be disabled. A null application ID is only allowed with GTK or later. \nParameters \nThe application ID. \nthe application flags \na new Gtk.Application instance \nSince \nCreates a new Gtk.Application instance. \nWhen using Gtk.Application it is not necessary to call Gtk.init manually. It is called as soon as the application gets registered as the primary instance. \nConcretely Gtk.init is called in the default handler for the startup signal. Therefore Gtk.Application subclasses should chain up in their startup handler before using any GTK API. \nNote that commandline arguments are not passed to Gtk.init. All GTK functionality that is available via commandline arguments can also be achieved by setting suitable environment variables such as G_DEBUG so this should not be a big problem. If you absolutely must support GTK commandline arguments you can explicitly call Gtk.init before creating the application instance. \nIf non NULL the application ID must be valid. See Gio.Application.id_is_valid. \nIf no application ID is given then some features most notably application uniqueness will be disabled. A null application ID is only allowed with GTK or later. \nParameters \nThe application ID. \nthe application flags \na new Gtk.Application instance \nSince \n"});