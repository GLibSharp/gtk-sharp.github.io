fragment_downloaded_cb({"url": "hotdoc_markdown/x11.html#page-description", "fragment": "On UNIX the X backend is the default build for GTK So you don t need to do anything special when compiling it and everything should just work. \nTo mix low level Xlib routines into a GTK program see GDK X Window System interaction in the GDK manual. \nThe X backend understands some additional command line arguments. \ndisplay display. \nThe name of the X display to open instead of the one specified in the DISPLAY environment variable. \nThe X11 GDK backend can be influenced with some additional environment variables. \nGDK_SYNCHRONIZE. \nIf set GDK makes all X requests synchronously. This is a useful option for debugging but it will slow down the performance considerably. \nGDK_CORE_DEVICE_EVENTS. \nIf set GDK makes does not use the XInput extension and only reacts to core X input events. \nGDK_SCALE. \nMust be set to an integer typically If set GDK will scale all windows by the specified factor. Scaled output is meant to be used on high dpi displays. Normally GDK will pick up a suitable scale factor for each monitor from the display system. This environment variable allows to override that. \nGDK_DPI_SCALE. \nThis can be useful when using scale aware GTK applications together with scale unaware applications on a high dpi display. In that case the font resolution can be doubled to make scale unaware applications readable and GDK_DPI_SCALE can be set to compensate for that in GTK applications which are already scaled by setting GDK_SCALE \nPeople coming from a Windows or MacOS background often find certain aspects of the X Window System surprising. This section introduces some basic X concepts at a high level. For more details the book most people use is called the Xlib Programming Manual by Adrian Nye this book is volume one in the O Reilly X Window System series. \nStandards are another important resource if you re poking in low level X11 details in particular the ICCCM and the Extended Window Manager Hints specifications. freedesktop.org has links to many relevant specifications. \nThe GDK manual covers using Xlib in a GTK program. \nOther window systems typically put all their functionality in the application itself. With X each application involves three different programs the X server the application called a client because it s a client of the X server and a special client called the window manager. \nThe X server is in charge of managing resources processing drawing requests and dispatching events such as keyboard and mouse events to interested applications. So client applications can ask the X server to create a window draw a circle or move windows around. \nThe window manager is in charge of rendering the frame or borders around windows it also has final say on the size of each window and window states such as minimized maximized and so forth. On Windows and MacOS the application handles most of this. On X11 if you wish to modify the window s state or change its frame you must ask the window manager to do so on your behalf using an established convention. \nGTK has functions for asking the window manager to do various things see for example gtk_window_iconify or gtk_window_maximize or gtk_window_set_decorated Keep in mind that gtk_window_move and window sizing are ultimately controlled by the window manager as well and most window managers will ignore certain requests from time to time in the interests of good user interface. \n"});