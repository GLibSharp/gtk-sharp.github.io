fragment_downloaded_cb({"url": "hotdoc_markdown/gtkflowbox.html#gtk_flow_box_child_changed", "fragment": "gtk_flow_box_child_changed \nGtk.prototype.changed \nGtk.FlowBoxChild.changed \nMarks child as changed causing any state that depends on this to be updated. This affects sorting and filtering. \nNote that calls to this method must be in sync with the data used for the sorting and filtering functions. For instance if the list is mirroring some external data set and two children changed in the external data set when you call gtk_flow_box_child_changed on the first child the sort function must only read the new data for the first of the two changed children otherwise the resorting of the children will be wrong. \nThis generally means that if you don t fully control the data model you have to duplicate the data that affects the sorting and filtering functions into the widgets themselves. Another alternative is to call gtk_flow_box_invalidate_sort on any model change but that is more expensive. \nParameters \na GtkFlowBoxChild \nSince \nMarks child as changed causing any state that depends on this to be updated. This affects sorting and filtering. \nNote that calls to this method must be in sync with the data used for the sorting and filtering functions. For instance if the list is mirroring some external data set and two children changed in the external data set when you call Gtk.prototype.changed on the first child the sort function must only read the new data for the first of the two changed children otherwise the resorting of the children will be wrong. \nThis generally means that if you don t fully control the data model you have to duplicate the data that affects the sorting and filtering functions into the widgets themselves. Another alternative is to call Gtk.prototype.invalidate_sort on any model change but that is more expensive. \nParameters \na Gtk.FlowBoxChild \nSince \nMarks child as changed causing any state that depends on this to be updated. This affects sorting and filtering. \nNote that calls to this method must be in sync with the data used for the sorting and filtering functions. For instance if the list is mirroring some external data set and two children changed in the external data set when you call Gtk.FlowBoxChild.changed on the first child the sort function must only read the new data for the first of the two changed children otherwise the resorting of the children will be wrong. \nThis generally means that if you don t fully control the data model you have to duplicate the data that affects the sorting and filtering functions into the widgets themselves. Another alternative is to call Gtk.FlowBox.invalidate_sort on any model change but that is more expensive. \nParameters \na Gtk.FlowBoxChild \nSince \n"});