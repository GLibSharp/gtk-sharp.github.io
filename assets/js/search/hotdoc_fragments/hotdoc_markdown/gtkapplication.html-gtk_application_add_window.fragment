fragment_downloaded_cb({"url": "hotdoc_markdown/gtkapplication.html#gtk_application_add_window", "fragment": "gtk_application_add_window \nGtk.prototype.add_window \nGtk.Application.add_window \nAdds a window to application. \nThis call can only happen after the application has started typically you should add new application windows in response to the emission of the activate signal. \nThis call is equivalent to setting the application property of window to application. \nNormally the connection between the application and the window will remain until the window is destroyed but you can explicitly remove it with gtk_application_remove_window. \nGTK will keep the application running as long as it has any windows. \nParameters \na GtkApplication \na GtkWindow \nSince \nAdds a window to application. \nThis call can only happen after the application has started typically you should add new application windows in response to the emission of the activate signal. \nThis call is equivalent to setting the application property of window to application. \nNormally the connection between the application and the window will remain until the window is destroyed but you can explicitly remove it with Gtk.prototype.remove_window. \nGTK will keep the application running as long as it has any windows. \nParameters \na Gtk.Application \na Gtk.Window \nSince \nAdds a window to application. \nThis call can only happen after the application has started typically you should add new application windows in response to the emission of the activate signal. \nThis call is equivalent to setting the application property of window to application. \nNormally the connection between the application and the window will remain until the window is destroyed but you can explicitly remove it with Gtk.Application.remove_window. \nGTK will keep the application running as long as it has any windows. \nParameters \na Gtk.Application \na Gtk.Window \nSince \n"});