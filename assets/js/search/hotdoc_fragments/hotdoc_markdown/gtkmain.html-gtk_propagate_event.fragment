fragment_downloaded_cb({"url": "hotdoc_markdown/gtkmain.html#gtk_propagate_event", "fragment": "gtk_propagate_event \nprototype.propagate_event \nGtk.propagate_event \nSends an event to a widget propagating the event to parent widgets if the event remains unhandled. This function will emit the event through all the hierarchy of widget through all propagation phases. \nEvents received by GTK from GDK normally begin in gtk_main_do_event. Depending on the type of event existence of modal dialogs grabs etc. the event may be propagated if so this function is used. \ngtk_propagate_event calls gtk_widget_event on each widget it decides to send the event to. So gtk_widget_event is the lowest level function it simply emits the event and possibly an event specific signal on a widget. gtk_propagate_event is a bit higher level and gtk_main_do_event is the highest level. \nAll that said you most likely don t want to use any of these functions synthesizing events is rarely needed. There are almost certainly better ways to achieve your goals. For example use gtk_widget_queue_draw instead of making up expose events. \nParameters \na GtkWidget \nan event \nSends an event to a widget propagating the event to parent widgets if the event remains unhandled. This function will emit the event through all the hierarchy of widget through all propagation phases. \nEvents received by GTK from GDK normally begin in prototype.main_do_event. Depending on the type of event existence of modal dialogs grabs etc. the event may be propagated if so this function is used. \nprototype.propagate_event calls Gtk.prototype.event on each widget it decides to send the event to. So Gtk.prototype.event is the lowest level function it simply emits the event and possibly an event specific signal on a widget. prototype.propagate_event is a bit higher level and prototype.main_do_event is the highest level. \nAll that said you most likely don t want to use any of these functions synthesizing events is rarely needed. There are almost certainly better ways to achieve your goals. For example use Gtk.prototype.queue_draw instead of making up expose events. \nParameters \na Gtk.Widget \nan event \nSends an event to a widget propagating the event to parent widgets if the event remains unhandled. This function will emit the event through all the hierarchy of widget through all propagation phases. \nEvents received by GTK from GDK normally begin in Gtk.main_do_event. Depending on the type of event existence of modal dialogs grabs etc. the event may be propagated if so this function is used. \nGtk.propagate_event calls Gtk.Widget.event on each widget it decides to send the event to. So Gtk.Widget.event is the lowest level function it simply emits the event and possibly an event specific signal on a widget. Gtk.propagate_event is a bit higher level and Gtk.main_do_event is the highest level. \nAll that said you most likely don t want to use any of these functions synthesizing events is rarely needed. There are almost certainly better ways to achieve your goals. For example use Gtk.Widget.queue_draw instead of making up expose events. \nParameters \na Gtk.Widget \nan event \n"});