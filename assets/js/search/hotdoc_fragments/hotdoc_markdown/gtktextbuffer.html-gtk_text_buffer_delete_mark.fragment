fragment_downloaded_cb({"url": "hotdoc_markdown/gtktextbuffer.html#gtk_text_buffer_delete_mark", "fragment": "gtk_text_buffer_delete_mark \nGtk.prototype.delete_mark \nGtk.TextBuffer.delete_mark \nDeletes mark so that it s no longer located anywhere in the buffer. Removes the reference the buffer holds to the mark so if you haven t called g_object_ref on the mark it will be freed. Even if the mark isn t freed most operations on mark become invalid until it gets added to a buffer again with gtk_text_buffer_add_mark. Use gtk_text_mark_get_deleted to find out if a mark has been removed from its buffer. The mark deleted signal will be emitted as notification after the mark is deleted. \nParameters \na GtkTextBuffer \na GtkTextMark in buffer \nDeletes mark so that it s no longer located anywhere in the buffer. Removes the reference the buffer holds to the mark so if you haven t called GObject.prototype.ref on the mark it will be freed. Even if the mark isn t freed most operations on mark become invalid until it gets added to a buffer again with Gtk.prototype.add_mark. Use Gtk.prototype.get_deleted to find out if a mark has been removed from its buffer. The mark deleted signal will be emitted as notification after the mark is deleted. \nParameters \na Gtk.TextBuffer \na Gtk.TextMark in buffer \nDeletes mark so that it s no longer located anywhere in the buffer. Removes the reference the buffer holds to the mark so if you haven t called GObject.Object.ref on the mark it will be freed. Even if the mark isn t freed most operations on mark become invalid until it gets added to a buffer again with Gtk.TextBuffer.add_mark. Use Gtk.TextMark.get_deleted to find out if a mark has been removed from its buffer. The mark deleted signal will be emitted as notification after the mark is deleted. \nParameters \na Gtk.TextBuffer \na Gtk.TextMark in buffer \n"});