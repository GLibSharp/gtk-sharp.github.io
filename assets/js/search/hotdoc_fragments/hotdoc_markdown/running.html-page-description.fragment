fragment_downloaded_cb({"url": "hotdoc_markdown/running.html#page-description", "fragment": "All GTK applications support a number of standard commandline options. These are removed from argv by gtk_init Modules may parse and remove further options. The X11 and Windows GDK backends parse some additional commandline options. \ngtk module module. \nA list of modules to load in addition to those specified in the GTK3_MODULES environment variable and the gtk modules setting. \ng fatal warnings. \nMake GTK abort on all warnings. This is useful to stop on the first warning in a debugger if your application is printing multiple warnings. It s almost always best to start debugging with the first warning that occurs. \ngtk debug options. \nA list of debug options to turn on in addition to those specified in the GTK_DEBUG environment variable. This option is not available if GTK has been configured with enable debug no. \ngtk no debug options. \nA list of debug options to turn off. This option is only available if GTK has been configured with enable debug yes. \nThe following options are really used by GDK not by GTK but we list them here for completeness nevertheless. \nclass class. \nSets the program class see gdk_set_program_class \nname name. \nSets the program name. \ngdk debug options. \nA list of debug options to turn on in addition to those specified in the GDK_DEBUG environment variable. This option is only available if GTK has been configured with enable debug yes. \ngdk no debug options. \nA list of debug options to turn off. This option is only available if GTK has been configured with enable debug yes. \nGTK inspects a number of environment variables in addition to standard variables like LANG PATH HOME or DISPLAY mostly to determine paths to look for certain files. The X11 Windows and Broadway GDK backends use some additional environment variables. \nGTK_DEBUG. \nUnless GTK has been configured with enable debug no this variable can be set to a list of debug options which cause GTK to print out different types of debugging information. \nactions Actions and menu models \nbaselines Show baselines \nbuilder GtkBuilder support \ngeometry Size allocation \nicontheme Icon themes \ninteractive Open the interactive debugger \nkeybindings Keybindings \nmisc Miscellaneous information \nmodules Loading of modules \nno css cache Bypass caching for CSS style properties \nprinting Printing support \nsize request Size requests \ntext Text widget internals \ntouchscreen Pretend the pointer is a touchscreen device \ntree Tree widget internals \nupdates Visual feedback about window updates \nresize Highlight resizing widgets \nlayout Show layout borders \nsnapshot Include debug render nodes in the generated snapshots \nThe special value all can be used to turn on all debug options. The special value help can be used to obtain a list of all supported debug options. \nGTK3_MODULES. \nA list of modules to load. Note that GTK also allows to specify modules to load via a commandline option gtk module and with the gtk modules setting. \nGTK_MODULES. \nA list of modules to load in addition to the ones in the GTK3_MODULES variable. \nWarning \nNote that this environment variable is read by GTK x too which may not have the same set of modules available for loading. Use \nGTK3_MODULES \nfor modules that are only compatible with GTK \nGTK_PATH. \nSpecifies a list of directories to search when GTK is looking for dynamically loaded objects such as the modules specified by GTK_MODULES theme engines input method modules file system backends and print backends. If the path to the dynamically loaded object is given as an absolute path name then GTK loads it directly. Otherwise GTK goes in turn through the directories in GTK_PATH followed by the directory gtk in the user s home directory followed by the system default directory which is libdir gtk modules. If GTK_EXE_PREFIX is defined libdir is GTK_EXE_PREFIX lib. Otherwise it is the libdir specified when GTK was configured usually usr lib or usr local lib. For each directory in this list GTK actually looks in a subdirectory directory version host type Where version is derived from the version of GTK use pkg config variable gtk_binary_version gtk to determine this from a script host is the architecture on which GTK was built. use pkg config variable gtk_host gtk to determine this from a script and type is a directory specific to the type of modules currently it can be modules engines immodules filesystems or printbackends corresponding to the types of modules mentioned above. Either version host or both may be omitted. GTK looks first in the most specific directory then in directories with fewer components. The components of GTK_PATH are separated by the character on Linux and Unix and the character on Windows. \nWarning \nNote that this environment variable is read by GTK x too which makes it unsuitable for setting it system wide or session wide since doing so will cause either GTK x applications or GTK applications to see incompatible modules. \nGTK_IM_MODULE. \nSpecifies an IM module to use in preference to the one determined from the locale. If this isn t set and you are running on the system that enables XSETTINGS and has a value in Gtk IMModule that will be used for the default IM module. This also can be a colon separated list of input methods which GTK will try in turn until it finds one available on the system. \nGTK_IM_MODULE_FILE. \nSpecifies the file listing the IM modules to load. This environment variable the default value libdir gtk immodules.cache libdir has the same meaning here as explained for GTK_PATH \nThe immodules.cache file is generated by the gtk query immodules utility. \nWarning \nNote that this environment variable is read by GTK x too which makes it unsuitable for setting it system wide or session wide since doing so will cause either GTK x applications or GTK applications to see the wrong list of IM modules. \nGTK_EXE_PREFIX. \nIf set GTK uses GTK_EXE_PREFIX lib instead of the libdir configured when GTK was compiled. \nGTK_DATA_PREFIX. \nIf set makes GTK use GTK_DATA_PREFIX instead of the prefix configured when GTK was compiled. \nGTK_THEME. \nIf set makes GTK use the named theme instead of the theme that is specified by the gtk theme name setting. This is intended mainly for easy debugging of theme issues. \nIt is also possible to specify a theme variant to load by appending the variant name with a colon like this GTK_THEME Adwaita dark \nThe following environment variables are used by GdkPixbuf GDK or Pango not by GTK itself but we list them here for completeness nevertheless. \nGDK_PIXBUF_MODULE_FILE. \nSpecifies the file listing the GdkPixbuf loader modules to load. This environment variable overrides the default value libdir gtk loaders.cache libdir is the sysconfdir specified when GTK was configured usually usr local lib. \nThe loaders.cache file is generated by the gdk pixbuf query loaders utility. \nGDK_DEBUG. \nIf GTK has been configured with enable debug yes this variable can be set to a list of debug options which cause GDK to print out different types of debugging information. \ncursor Information about cursor objects only win32 \ndnd Information about drag and drop \ndraw Information about drawing operations only win32 \neventloop Information about event loop operation mostly Quartz \nmisc Miscellaneous information \nnogl Turn off OpenGL. GDK will behave as if OpenGL support was not available. \nnograbs Turn off all pointer and keyboard grabs \nxinerama Simulate a multi monitor setup \nxim Information about XIM support \nThe special value all can be used to turn on all debug options. \nGDK_RENDERING. \nIf set selects the way how GDK creates similar surfaces. This affects both the functionality of the function gdk_window_create_similar_surface as well as the way GDK creates backing surfaces for double buffering. The following values can be used \nsimilar Create similar surfaces to the window in use. This is the default behavior when the variable is not set. \nimage Always create image surfaces. This essentially turns off all hardware acceleration inside GTK. \nrecording Always create recording surfaces. This causes bare rendering to the backend without the creation of intermediate surfaces Pixmaps in X and will likely cause flicker. \nAll other values will be ignored and fall back to the default behavior. More values might be added in the future. \nGDK_BACKEND. \nIf set selects the GDK backend to use. Selecting a backend requires that GTK is compiled with support for that backend. The following backends can be selected provided they are included in the GDK libraries you are using \nquartz Selects the native Quartz backend \nwin32 Selects the native backend for Microsoft Windows \nx11 Selects the native backend for connecting to X11 servers. \nbroadway Selects the Broadway backend for display in web browsers \nwayland Selects the Wayland backend for connecting to Wayland display servers \nmir Selects the Mir backend for connecting to Mir display servers \nSince this environment variable can contain a comma separated list of backend names which are tried in order. The list may also contain a which means try all remaining backends. The special value help can be used to make GDK print out a list of all available backends. For more information about selecting backends see the gdk_display_manager_get function. \nGTK_CSD. \nThe default value of this environment variable is If changed to this disables the default use of client side decorations on GTK windows thus making the window manager responsible for drawing the decorations of windows that do not have a custom titlebar widget. \nCSD is always used for windows with a custom titlebar widget set as the WM should not draw another titlebar or other decorations around the custom one. \nXDG_DATA_HOME XDG_DATA_DIRS. \nGTK uses these environment variables to locate icon themes and MIME information. For more information see Icon Theme Specification the Shared MIME info Database and the Base Directory Specification. \nDESKTOP_STARTUP_ID. \nGTK uses this environment variable to provide startup notification according to the Startup Notification Spec. Following the specification GTK unsets this variable after reading it to keep it from leaking to child processes So if you need its value for your own purposes you have to read it before calling gtk_init \nGTK includes an interactive debugger called the GTK Inspector which lets you explore the widget tree of any GTK application at runtime as well as tweak the theme and trigger visual debugging aids. You can easily try out changes at runtime before putting them into the code. \nNote that the GTK inspector can only show GTK internals. It can not understand the application specific logic of a GTK application. Also the fact that the GTK inspector is running in the application process limits what it can do. It is meant as a complement to full blown debuggers and system tracing facilities such as DTrace not as a replacement. \nTo enable the GTK inspector you can use the Control Shift I or Control Shift D keyboard shortcuts or set the GTK_DEBUG interactive environment variable. \nThere are a few more environment variables that can be set to influence how the inspector renders its UI. GTK_INSPECTOR_DISPLAY and GTK_INSPECTOR_RENDERER determine the GDK display and the GSK renderer that the inspector is using. \nIn some situations it may be inappropriate to give users access to the GTK inspector. The keyboard shortcuts can be disabled with the enable inspector keybinding key in the org.gtk.Settings.Debug GSettings schema. \n"});