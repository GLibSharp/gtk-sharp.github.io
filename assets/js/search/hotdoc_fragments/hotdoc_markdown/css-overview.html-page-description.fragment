fragment_downloaded_cb({"url": "hotdoc_markdown/css-overview.html#page-description", "fragment": "This chapter describes in detail how GTK uses CSS for styling and layout. \nWe loosely follow the CSS value definition specification in the formatting of syntax productions. Nonterminals are enclosed in angle backets all other strings that are not listed here are literals Juxtaposition means all components must occur in the given order A double ampersand means all components must occur in any order A double bar means one or more of the components must occur in any order A single bar indicates an alternative exactly one of the components must occur Brackets are used for grouping A question mark means that the preceding component is optional An asterisk means zero or more copies of the preceding component A plus means one or more copies of the preceding component A number in curly braces n means that the preceding component occurs exactly n times Two numbers in curly braces m n mean that the preceding component occurs at least m times and at most n times \nGTK applies the style information found in style sheets by matching the selectors against a tree of nodes. Each node in the tree has a name a state and possibly style classes. The children of each node are linearly ordered. \nEvery widget has one or more of these CSS nodes and determines their name state style classes and how they are layed out as children and siblings in the overall node tree. The documentation for each widget explains what CSS nodes it has. \nThe basic structure of the style sheets understood by GTK is a series of statements which are either rule sets or rules separated by whitespace. \nA rule set consists of a selector and a declaration block which is a series of declarations enclosed in curly braces. The declarations are separated by semicolons. Multiple selectors can share the same declaration block by putting all the separators in front of the block separated by commas. \nGTK supports the CSS import rule in order to load another style sheet in addition to the currently parsed one. \nThe syntax for import rules is as follows \nTo learn more about the import rule you can read the Cascading module of the CSS specification. \nSelectors work very similar to the way they do in CSS. \nAll widgets have one or more CSS nodes with element names and style classes. When style classes are used in selectors they have to be prefixed with a period. Widget names can be used in selectors like IDs. When used in a selector widget names must be prefixed with a character. \nIn more complicated situations selectors can be combined in various ways. To require that a node satisfies several conditions combine several selectors into one by concatenating them. To only match a node when it occurs inside some other node write the two selectors after each other separated by whitespace. To restrict the match to direct children of the parent node insert a character between the two selectors. \nIt is possible to select CSS nodes depending on their position amongst their siblings by applying pseudo classes to the selector like first child last child or nth child even When used in selectors pseudo classes must be prefixed with a character. \nAnother use of pseudo classes is to match widgets depending on their state. The available pseudo classes for widget states are active hover disabled selected focus indeterminate checked and backdrop. In addition the following pseudo classes don t have a direct equivalent as a widget state dir ltr and dir rtl for text direction link and visited for links and drop active for highlighting drop targets Widget state pseudo classes may only apply to the last element in a selector. \nTo determine the effective style for a widget all the matching rule sets are merged. As in CSS rules apply by specificity so the rules whose selectors more closely match a node will take precedence over the others. \nThe full syntax for selectors understood by GTK can be found in the table below. The main difference to CSS is that GTK does not currently support attribute selectors. \nTo learn more about selectors in CSS read the Selectors module of the CSS specification. \nCSS allows to specify colors in various ways using numeric values or names from a predefined list of colors. \nThe keyword currentColor resolves to the current value of the color property when used in another property and to the inherited value of the color property when used in the color property itself. \nThe keyword transparent can be considered a shorthand for rgba \nFor a list of valid color names and for more background on colors in CSS see the Color module of the CSS specification. \nGTK adds several additional ways to specify colors. \nThe first is a reference to a color defined via a define color rule. The syntax for define color rules is as follows \nTo refer to the color defined by a define color rule use the name from the rule prefixed with \nGTK also supports color expressions which allow colors to be transformed to new ones and can be nested providing a rich language to define colors. Color expressions resemble functions taking or more colors and in some cases a number as arguments. \nshade leaves the color unchanged when the number is and transforms it to black or white as the number approaches or respectively. For mix or return the unaltered st or nd color respectively numbers between and return blends of the two and numbers below or above intensify the RGB components of the st or nd color respectively. alpha takes a number from to and applies that as the opacity of the supplied color. \nOn Windows GTK allows to refer to system colors as follows \nCSS allows to specify images in various ways for backgrounds and borders. \nThe simplest way to specify an image in CSS is to load an image file from a URL. CSS does not specify anything about supported file formats within GTK you can expect at least PNG JPEG and SVG to work. The full list of supported image formats is determined by the available gdk pixbuf image loaders and may vary between systems. \nA crossfade lets you specify an image as an intermediate between two images. Crossfades are specified in the draft of the level Image module of the CSS specification. \nThe image syntax provides a way to specify fallbacks in case an image format may not be supported. Multiple fallback images can be specified and will be tried in turn until one can be loaded successfully. The last fallback may be a color which will be rendered as a solid color image. \nGradients are images that smoothly fades from one color to another. CSS provides ways to specify repeating and non repeating linear and radial gradients. Radial gradients can be circular or axis aligned ellipses. \nA linear gradient is created by specifying a gradient line and then several colors placed along that line. The gradient line may be specified using an angle or by using direction keywords. \nA radial gradient is created by specifying a center point and one or two radii. The radii may be given explicitly as lengths or percentages or indirectly by keywords that specify how the end circle or ellipsis should be positioned relative to the area it is derawn in. \nTo learn more about gradients in CSS including details of how color stops are placed on the gradient line and keywords for specifying radial sizes you can read the Image module of the CSS specification. \nGTK extends the CSS syntax for images and also uses it for specifying icons. \nGTK has extensive support for loading icons from icon themes. It is accessible from CSS with the gtk icontheme syntax. \nThe specified icon name is used to look up a themed icon while taking into account the values of the gtk icon theme and gtk icon palette properties. This kind of image is mainly used as value of the gtk icon source property. \nGTK supports scaled rendering on hi resolution displays. This works best if images can specify normal and hi resolution variants. From CSS this can be done with the gtk scaled syntax. \nWhile gtk scaled accepts multiple higher resolution variants in practice it will mostly be used to specify a regular image and one variant for scale \nSymbolic icons from the icon theme are recolored according to the gtk icon palette property. The recoloring is sometimes needed for images that are not part of an icon theme and the gtk recolor syntax makes this available. gtk recolor requires a url as first argument. The remaining arguments specify the color palette to use. If the palette is not explicitly specified the current value of the gtk icon palette property is used. \nOn Windows GTK allows to refer to system theme parts as images as follows \nCSS defines a mechanism by which changes in CSS property values can be made to take effect gradually instead of all at once. GTK supports these transitions as well. \nTo enable a transition for a property when a rule set takes effect it needs to be listed in the transition property property in that rule set. Only animatable properties can be listed in the transition property. \nThe details of a transition can modified with the transition duration transition timing function and transition delay properties. \nTo learn more about transitions you can read the Transitions module of the CSS specification. \nIn addition to transitions which are triggered by changes of the underlying node tree CSS also supports defined animations. While transitions specify how property values change from one value to a new value animations explicitly define intermediate property values in keyframes. \nKeyframes are defined with an rule which contains one or more of rule sets with special selectors. Property declarations for nonanimatable properties are ignored in these rule sets with the exception of animation properties \nTo enable an animation the name of the keyframes must be set as the value of the animation name property. The details of the animation can modified with the animation duration animation timing function animation iteration count and other animation properties. \nTo learn more about animations you can read the Animations module of the CSS specification. \nIn order to extend key bindings affecting different widgets GTK supports the binding set rule to parse a set of bind unbind directives. Note that in order to take effect the binding sets defined in this way must be associated with rule sets by setting the gtk key bindings property. \nThe syntax for binding set rules is as follows \nwhere accelerator is a string that can be parsed by gtk_accelerator_parse signal name is the name of a keybinding signal of the widget in question and the argument list must be according to the signals declaration. \n"});