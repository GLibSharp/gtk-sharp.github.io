fragment_downloaded_cb({"url": "hotdoc_markdown/question_index.html#page-description", "fragment": "This is an index of the reference manual organized by common How do I... questions. If you aren t sure which documentation to read for the question you have this list is a good place to start. \nQ How do I get started with GTK \nA The GTK website offers some tutorials and other documentation most of it about GTK x but mostly still applicable More documentation ranging from whitepapers to online books can be found at the GNOME developer s site. After studying these materials you should be well prepared to come back to this reference manual for details. \nQ Where can I get help with GTK submit a bug report or make a feature request \nA See the documentation on this topic. \nQ How do I port from one GTK version to another \nA See You may also find useful information in the documentation for specific widgets and functions. \nIf you have a question not covered in the manual feel free to ask on the mailing lists and please file a bug report against the documentation. \nQ How does memory management work in GTK Should I free data returned from functions \nA See the documentation for GObject and GInitiallyUnowned. For GObject note specifically g_object_ref and g_object_unref GInitiallyUnowned is a subclass of GObject so the same points apply except that it has a floating state explained in its documentation \nFor strings returned from functions they will be declared const if they should not be freed. Non const strings should be freed with g_free Arrays follow the same rule. If you find an undocumented exception to the rules please report a bug to https bugzilla.gnome.org. \nQ Why does my program leak memory if I destroy a widget immediately after creating it \nA If GtkFoo isn t a toplevel window then \nis a memory leak because no one assumed the initial floating reference. If you are using a widget and you aren t immediately packing it into a container then you probably want standard reference counting not floating reference counting. \nTo get this you must acquire a reference to the widget and drop the floating reference ref and sink in GTK parlance after creating it \nWhen you want to get rid of the widget you must call gtk_widget_destroy to break any external connections to the widget before dropping your reference \nWhen you immediately add a widget to a container it takes care of assuming the initial floating reference and you don t have to worry about reference counting at all just call gtk_widget_destroy to get rid of the widget. \nQ How do I use GTK with threads \nA This is covered in the GDK threads documentation. See also the GThread documentation for portable threading primitives. \nQ How do I internationalize a GTK program \nA Most people use GNU gettext already required in order to install GLib. On a UNIX or Linux system with gettext installed type info gettext to read the documentation. \nThe short checklist on how to use gettext is call bindtextdomain so gettext can find the files containing your translations call textdomain to set the default translation domain call bind_textdomain_codeset to request that all translated strings are returned in UTF then call gettext to look up each string to be translated in the default domain. \ngi18n.h provides the following shorthand macros for convenience. Conventionally people define macros as follows for convenience \nYou use N_ N stands for no op to mark a string for translation in a location where a function call to gettext is not allowed such as in an array initializer. You eventually have to call gettext on the string to actually fetch the translation. _ both marks the string for translation and actually translates it. The C_ macro C stands for context adds an additional context to the string that is marked for translation which can help to disambiguate short strings that might need different translations in different parts of your program. \nCode using these macros ends up looking like this \nLibraries using gettext should use dgettext instead of gettext which allows them to specify the translation domain each time they ask for a translation. Libraries should also avoid calling textdomain since they will be specifying the domain instead of using the default. \nWith the convention that the macro GETTEXT_PACKAGE is defined to hold your libraries translation domain gi18n lib.h can be included to provide the following convenience \nQ How do I use non ASCII characters in GTK programs \nA GTK uses Unicode more exactly UTF for all text. UTF encodes each Unicode codepoint as a sequence of one to six bytes and has a number of nice properties which make it a good choice for working with Unicode text in C programs \nASCII characters are encoded by their familiar ASCII codepoints. \nASCII characters never appear as part of any other character. \nThe zero byte doesn t occur as part of a character so that UTF strings can be manipulated with the usual C library functions for handling zero terminated strings. \nMore information about Unicode and UTF can be found in the UTF and Unicode FAQ for Unix Linux. GLib provides functions for converting strings between UTF and other encodings see g_locale_to_utf8 and g_convert \nText coming from external sources e.g. files or user input has to be converted to UTF before being handed over to GTK The following example writes the content of a IS0 encoded text file to stdout \nFor string literals in the source code there are several alternatives for handling non ASCII content \ndirect UTF If your editor and compiler are capable of handling UTF encoded sources it is very convenient to simply use UTF for string literals since it allows you to edit the strings in wysiwyg Note that choosing this option may reduce the portability of your code. \nescaped UTF Even if your toolchain can t handle UTF directly you can still encode string literals in UTF by using octal or hexadecimal escapes like or xa8 to encode each byte. This is portable but modifying the escaped strings is not very convenient. Be careful when mixing hexadecimal escapes with ordinary text xa8abcd is a string of length \nruntime conversion If the string literals can be represented in an encoding which your toolchain can handle e.g. IS0 you can write your source files in that encoding and use g_convert to convert the strings to UTF at runtime. Note that this has some runtime overhead so you may want to move the conversion out of inner loops. \nHere is an example showing the three approaches using the copyright sign which has Unicode and ISO codepoint and is represented in UTF by the two bytes or as a string literal \nIf you are using gettext to localize your application you need to call bind_textdomain_codeset to ensure that translated strings are returned in UTF encoding. \nQ How do I use GTK with C \nA There are two ways to approach this. The GTK header files use the subset of C that s also valid C so you can simply use the normal GTK API in a C program. Alternatively you can use a C binding such as gtkmm which provides a native C API. \nWhen using GTK directly keep in mind that only functions can be connected to signals not methods. So you will need to use global functions or static class functions for signal connections. \nAnother common issue when using GTK directly is that C will not implicitly convert an integer to an enumeration. This comes up when using bitfields in C you can write the following code \nwhile in C you must write \nThere are very few functions that require this cast however. \nQ How do I use GTK with other non C languages \nA See the list of language bindings on https www.gtk.org. \nQ How do I load an image or animation from a file \nA To load an image file straight into a display widget use gtk_image_new_from_file To load an image for another purpose use gdk_pixbuf_new_from_file To load an animation use gdk_pixbuf_animation_new_from_file gdk_pixbuf_animation_new_from_file can also load non animated images so use it in combination with gdk_pixbuf_animation_is_static_image to load a file of unknown type. \nTo load an image or animation file asynchronously without blocking use GdkPixbufLoader. \nQ How do I draw text \nA To draw a piece of text use a Pango layout and pango_cairo_show_layout \nSee also the Cairo Rendering section of Pango manual. \nQ How do I measure the size of a piece of text \nA To obtain the size of a piece of text use a Pango layout and pango_layout_get_pixel_size using code like the following \nSee also the Layout Objects section of Pango manual. \nQ Why are types not registered if I use their GTK_TYPE_BLAH macro \nA The GTK_TYPE_BLAH macros are defined as calls to gtk_blah_get_type and the _get_type functions are declared as G_GNUC_CONST which allows the compiler to optimize the call away if it appears that the value is not being used. \nA common workaround for this problem is to store the result in a volatile variable which keeps the compiler from optimizing the call away. \nQ How do I create a transparent toplevel window \nA To make a window transparent it needs to use a visual which supports that. This is done by getting the RGBA visual of the screen with gdk_screen_get_rgba_visual and setting it on the window. Note that gdk_screen_get_rgba_visual will return NULL if transparent windows are not supported on the screen you should fall back to gdk_screen_get_system_visual in that case. Additionally note that this will change from screen to screen so it needs to be repeated whenever the window is moved to a different screen. \nTo fill the alpha channel on the window simply use cairos RGBA drawing capabilities. \nNote that the presence of an RGBA visual is no guarantee that the window will actually appear transparent on screen. On X11 this requires a compositing manager to be running. See gdk_display_is_composited for a way to find out if the alpha channel will be respected. \nQ for lists and trees \nA See tree widget overview you should use the GtkTreeView widget. A list is just a tree with no branches so the tree widget is used for lists as well \nQ for multi line text display or editing \nA See text widget overview you should use the GtkTextView widget. \nIf you only have a small amount of text GtkLabel may also be appropriate of course. It can be made selectable with gtk_label_set_selectable For a single line text entry see GtkEntry. \nQ to display an image or animation \nA GtkImage can display images in just about any format GTK understands. You can also use GtkDrawingArea if you need to do something more complex such as draw text or graphics over the top of the image. \nQ for presenting a set of mutually exclusive choices where Windows would use a combo box \nA With GTK a GtkComboBox is the recommended widget to use for this use case. This widget looks like either a combo box or the current option menu depending on the current theme. If you need an editable text entry use the GtkComboBox has entry property. \nQ How do I change the color of a widget \nA See gtk_widget_override_color and gtk_widget_override_background_color You can also change the appearance of a widget by installing a custom style provider see gtk_style_context_add_provider \nQ How do I change the font of a widget \nA This has several possible answers depending on what exactly you want to achieve. One option is gtk_widget_override_font \nIf you want to make the text of a label larger you can use gtk_label_set_markup \nThis is preferred for many apps because it s a relative size to the user s chosen font size. See g_markup_escape_text if you are constructing such strings on the fly. \nYou can also change the font of a widget by putting \nin a CSS file loading it with gtk_css_provider_load_from_file and adding the provider with gtk_style_context_add_provider_for_screen To associate this style information with your widget set a style class on its GtkStyleContext using gtk_style_context_add_class The advantage of this approach is that users can then override the font you have chosen. See the GtkStyleContext documentation for more discussion. \nQ How do I disable ghost desensitize a widget \nA In GTK a disabled widget is termed insensitive. See gtk_widget_set_sensitive \nQ How do I get the contents of the entire text widget as a string \nA See gtk_text_buffer_get_bounds and gtk_text_buffer_get_text or gtk_text_iter_get_text \nQ How do I make a text widget display its complete contents in a specific font \nA If you use gtk_text_buffer_insert_with_tags with appropriate tags to select the font the inserted text will have the desired appearance but text typed in by the user before or after the tagged block will appear in the default style. \nTo ensure that all text has the desired appearance use gtk_widget_override_font to change the default font for the widget. \nQ How do I make a text view scroll to the end of the buffer automatically \nA A good way to keep a text buffer scrolled to the end is to place a mark at the end of the buffer and give it right gravity. The gravity has the effect that text inserted at the mark gets inserted before keeping the mark at the end. \nTo ensure that the end of the buffer remains visible use gtk_text_view_scroll_to_mark to scroll to the mark after inserting new text. \nThe gtk demo application contains an example of this technique. \nQ How do I associate some data with a row in the tree \nA Remember that the GtkTreeModel columns don t necessarily have to be displayed. So you can put non user visible data in your model just like any other data and retrieve it with gtk_tree_model_get See the tree widget overview. \nQ How do I put an image and some text in the same column \nA You can pack more than one GtkCellRenderer into a single GtkTreeViewColumn using gtk_tree_view_column_pack_start or gtk_tree_view_column_pack_end So pack both a GtkCellRendererPixbuf and a GtkCellRendererText into the column. \nQ I can set data easily on my GtkTreeStore GtkListStore models using gtk_list_store_set and gtk_tree_store_set but can t read it back \nA Both the GtkTreeStore and the GtkListStore implement the GtkTreeModel interface. Consequentially you can use any function this interface implements. The easiest way to read a set of data back is to use gtk_tree_model_get \nQ How do I change the way that numbers are formatted by GtkTreeView \nA Use gtk_tree_view_insert_column_with_data_func or gtk_tree_view_column_set_cell_data_func and do the conversion from number to string yourself with say g_strdup_printf \nThe following example demonstrates this \nQ How do I hide the expander arrows in my tree view \nA Set the expander column property of the tree view to a hidden column. See gtk_tree_view_set_expander_column and gtk_tree_view_column_set_visible \nQ How do I use cairo to draw in GTK applications \nA The GtkWidget draw signal gets a ready to use cairo context as parameter that you should use. \nAll drawing in GTK is normally done in a draw handler and GTK creates a temporary pixmap for double buffering the drawing. It is possible to turn off double buffering with gtk_widget_set_double_buffered but this is not ideal since it can cause some flickering. \nQ Can I improve the performance of my application by using the Glitz or GL backend of cairo \nA No. The GDK X11 backend uses the cairo X backend and the other GDK backends use their respective native cairo backends The GTK developers believe that the best way to improving the GDK drawing performance is to optimize the cairo X backend and the relevant code paths in the X server that is uses mostly the Render extension \nQ Can I use cairo to draw on a GdkPixbuf \nA No at least not yet. The cairo image surface does not support the pixel format used by GdkPixbuf. \n"});