fragment_downloaded_cb({"url": "gtktextbuffer.html#gtk_text_buffer_begin_user_action", "fragment": "gtk_text_buffer_begin_user_action \nGtk.prototype.begin_user_action \nGtk.TextBuffer.begin_user_action \nCalled to indicate that the buffer operations between here and a call to gtk_text_buffer_end_user_action are part of a single user visible operation. The operations between gtk_text_buffer_begin_user_action and gtk_text_buffer_end_user_action can then be grouped when creating an undo stack. GtkTextBuffer maintains a count of calls to gtk_text_buffer_begin_user_action that have not been closed with a call to gtk_text_buffer_end_user_action and emits the begin user action and end user action signals only for the outermost pair of calls. This allows you to build user actions from other user actions. \nThe interactive buffer mutation functions such as gtk_text_buffer_insert_interactive automatically call begin end user action around the buffer operations they perform so there s no need to add extra calls if you user action consists solely of a single call to one of those functions. \nParameters \na GtkTextBuffer \nCalled to indicate that the buffer operations between here and a call to Gtk.prototype.end_user_action are part of a single user visible operation. The operations between Gtk.prototype.begin_user_action and Gtk.prototype.end_user_action can then be grouped when creating an undo stack. Gtk.TextBuffer maintains a count of calls to Gtk.prototype.begin_user_action that have not been closed with a call to Gtk.prototype.end_user_action and emits the begin user action and end user action signals only for the outermost pair of calls. This allows you to build user actions from other user actions. \nThe interactive buffer mutation functions such as Gtk.prototype.insert_interactive automatically call begin end user action around the buffer operations they perform so there s no need to add extra calls if you user action consists solely of a single call to one of those functions. \nParameters \na Gtk.TextBuffer \nCalled to indicate that the buffer operations between here and a call to Gtk.TextBuffer.end_user_action are part of a single user visible operation. The operations between Gtk.TextBuffer.begin_user_action and Gtk.TextBuffer.end_user_action can then be grouped when creating an undo stack. Gtk.TextBuffer maintains a count of calls to Gtk.TextBuffer.begin_user_action that have not been closed with a call to Gtk.TextBuffer.end_user_action and emits the begin user action and end user action signals only for the outermost pair of calls. This allows you to build user actions from other user actions. \nThe interactive buffer mutation functions such as Gtk.TextBuffer.insert_interactive automatically call begin end user action around the buffer operations they perform so there s no need to add extra calls if you user action consists solely of a single call to one of those functions. \nParameters \na Gtk.TextBuffer \n"});