fragment_downloaded_cb({"url": "text_widget.html#page-description", "fragment": "GTK has an extremely powerful framework for multiline text editing. The primary objects involved in the process are GtkTextBuffer which represents the text being edited and GtkTextView a widget which can display a GtkTextBuffer. Each buffer can be displayed by any number of views. \nOne of the important things to remember about text in GTK is that it s in the UTF encoding. This means that one character can be encoded as multiple bytes. Character counts are usually referred to as offsets while byte counts are called indexes. If you confuse these two things will work fine with ASCII but as soon as your buffer contains multibyte characters bad things will happen. \nText in a buffer can be marked with tags. A tag is an attribute that can be applied to some range of text. For example a tag might be called bold and make the text inside the tag bold. However the tag concept is more general than that tags don t have to affect appearance. They can instead affect the behavior of mouse and key presses lock a range of text so the user can t edit it or countless other things. A tag is represented by a GtkTextTag object. One GtkTextTag can be applied to any number of text ranges in any number of buffers. \nEach tag is stored in a GtkTextTagTable. A tag table defines a set of tags that can be used together. Each buffer has one tag table associated with it only tags from that tag table can be used with the buffer. A single tag table can be shared between multiple buffers however. \nTags can have names which is convenient sometimes for example you can name your tag that makes things bold bold but they can also be anonymous which is convenient if you re creating tags on the fly \nMost text manipulation is accomplished with iterators represented by a GtkTextIter. An iterator represents a position between two characters in the text buffer. GtkTextIter is a struct designed to be allocated on the stack it s guaranteed to be copiable by value and never contain any heap allocated data. Iterators are not valid indefinitely whenever the buffer is modified in a way that affects the number of characters in the buffer all outstanding iterators become invalid. Note that deleting characters and then reinserting still invalidates iterators though you end up with the same number of characters you pass through a state with a different number \nBecause of this iterators can t be used to preserve positions across buffer modifications. To preserve a position the GtkTextMark object is ideal. You can think of a mark as an invisible cursor or insertion point it floats in the buffer saving a position. If the text surrounding the mark is deleted the mark remains in the position the text once occupied if text is inserted at the mark the mark ends up either to the left or to the right of the new text depending on its gravity. The standard text cursor in left to right languages is a mark with right gravity because it stays to the right of inserted text. \nLike tags marks can be either named or anonymous. There are two marks built in to GtkTextBuffer these are named insert and selection_bound and refer to the insertion point and the boundary of the selection which is not the insertion point respectively. If no text is selected these two marks will be in the same position. You can manipulate what is selected and where the cursor appears by moving these marks around. \nText buffers always contain at least one line but may be empty that is buffers can contain zero characters The last line in the text buffer never ends in a line separator such as newline the other lines in the buffer always end in a line separator. Line separators count as characters when computing character counts and character offsets. Note that some Unicode line separators are represented with multiple bytes in UTF and the two character sequence r n is also considered a line separator. \nThe simplest usage of GtkTextView might look like this \nIn many cases it s also convenient to first create the buffer with gtk_text_buffer_new then create a widget for that buffer with gtk_text_view_new_with_buffer Or you can change the buffer the widget displays after the widget is created with gtk_text_view_set_buffer \nThe way to affect text attributes in GtkTextView is to apply tags that change the attributes for a region of text. For text features that come from the theme such as font and foreground color use CSS to override their default values. \nThe gtk demo application that comes with GTK contains more example code for GtkTextView. \n"});