fragment_downloaded_cb({"url": "gtktreednd.html#gtk_tree_drag_dest_drag_data_received", "fragment": "gtk_tree_drag_dest_drag_data_received \nGtk.prototype.drag_data_received \nGtk.TreeDragDest.drag_data_received \nAsks the GtkTreeDragDest to insert a row before the path dest deriving the contents of the row from selection_data. If dest is outside the tree so that inserting before it is impossible FALSE will be returned. Also FALSE may be returned if the new row is not created for some model specific reason. Should robustly handle a dest no longer found in the model \nParameters \na GtkTreeDragDest \nrow to drop in front of \ndata to drop \nwhether a new row was created before position dest \nAsks the Gtk.TreeDragDest to insert a row before the path dest deriving the contents of the row from selection_data. If dest is outside the tree so that inserting before it is impossible false will be returned. Also false may be returned if the new row is not created for some model specific reason. Should robustly handle a dest no longer found in the model \nParameters \na Gtk.TreeDragDest \nrow to drop in front of \ndata to drop \nwhether a new row was created before position dest \nAsks the Gtk.TreeDragDest to insert a row before the path dest deriving the contents of the row from selection_data. If dest is outside the tree so that inserting before it is impossible False will be returned. Also False may be returned if the new row is not created for some model specific reason. Should robustly handle a dest no longer found in the model \nParameters \na Gtk.TreeDragDest \nrow to drop in front of \ndata to drop \nwhether a new row was created before position dest \n"});