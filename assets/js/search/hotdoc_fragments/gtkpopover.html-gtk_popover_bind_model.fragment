fragment_downloaded_cb({"url": "gtkpopover.html#gtk_popover_bind_model", "fragment": "gtk_popover_bind_model \nGtk.prototype.bind_model \nGtk.Popover.bind_model \nEstablishes a binding between a GtkPopover and a GMenuModel. \nThe contents of popover are removed and then refilled with menu items according to model. When model changes popover is updated. Calling this function twice on popover with different model will cause the first binding to be replaced with a binding to the new model. If model is NULL then any previous binding is undone and all children are removed. \nIf action_namespace is non NULL then the effect is as if all actions mentioned in the model have their names prefixed with the namespace plus a dot. For example if the action quit is mentioned and action_namespace is app then the effective action name is app.quit \nThis function uses GtkActionable to define the action name and target values on the created menu items. If you want to use an action group other than app and win or if you want to use a GtkMenuShell outside of a GtkApplicationWindow then you will need to attach your own action group to the widget hierarchy using gtk_widget_insert_action_group. As an example if you created a group with a quit action and inserted it with the name mygroup then you would use the action name mygroup.quit in your GMenuModel. \nParameters \na GtkPopover \nthe GMenuModel to bind to or NULL to remove binding \nthe namespace for actions in model \nSince \nEstablishes a binding between a Gtk.Popover and a Gio.MenuModel. \nThe contents of popover are removed and then refilled with menu items according to model. When model changes popover is updated. Calling this function twice on popover with different model will cause the first binding to be replaced with a binding to the new model. If model is null then any previous binding is undone and all children are removed. \nIf action_namespace is non NULL then the effect is as if all actions mentioned in the model have their names prefixed with the namespace plus a dot. For example if the action quit is mentioned and action_namespace is app then the effective action name is app.quit \nThis function uses Gtk.Actionable to define the action name and target values on the created menu items. If you want to use an action group other than app and win or if you want to use a Gtk.MenuShell outside of a Gtk.ApplicationWindow then you will need to attach your own action group to the widget hierarchy using Gtk.prototype.insert_action_group. As an example if you created a group with a quit action and inserted it with the name mygroup then you would use the action name mygroup.quit in your Gio.MenuModel. \nParameters \na Gtk.Popover \nthe Gio.MenuModel to bind to or null to remove binding \nthe namespace for actions in model \nSince \nEstablishes a binding between a Gtk.Popover and a Gio.MenuModel. \nThe contents of popover are removed and then refilled with menu items according to model. When model changes popover is updated. Calling this function twice on popover with different model will cause the first binding to be replaced with a binding to the new model. If model is None then any previous binding is undone and all children are removed. \nIf action_namespace is non NULL then the effect is as if all actions mentioned in the model have their names prefixed with the namespace plus a dot. For example if the action quit is mentioned and action_namespace is app then the effective action name is app.quit \nThis function uses Gtk.Actionable to define the action name and target values on the created menu items. If you want to use an action group other than app and win or if you want to use a Gtk.MenuShell outside of a Gtk.ApplicationWindow then you will need to attach your own action group to the widget hierarchy using Gtk.Widget.insert_action_group. As an example if you created a group with a quit action and inserted it with the name mygroup then you would use the action name mygroup.quit in your Gio.MenuModel. \nParameters \na Gtk.Popover \nthe Gio.MenuModel to bind to or None to remove binding \nthe namespace for actions in model \nSince \n"});