fragment_downloaded_cb({"url": "gtkdrawingarea.html#page-description", "fragment": "The GtkDrawingArea widget is used for creating custom user interface elements. It s essentially a blank widget you can draw on it. After creating a drawing area the application may want to connect to \nMouse and button press signals to respond to input from the user. \nThe realize signal to take any necessary actions when the widget is instantiated on a particular display. Create GDK resources in response to this signal. \nThe size allocate signal to take any necessary actions when the widget changes size. \nCall gtk_drawing_area_set_draw_func to handle redrawing the contents of the widget. \nThe following code portion demonstrates using a drawing area to display a circle in the normal widget foreground color. \nNote that GDK automatically clears the exposed area before causing a redraw and that drawing is implicitly clipped to the exposed area. \nThe draw function is normally called when a drawing area first comes onscreen or when it s covered by another window and then uncovered. You can also force a redraw by adding to the damage region of the drawing area s window using gtk_widget_queue_draw_region gtk_widget_queue_draw_area or gtk_widget_queue_draw. This will cause the drawing area to call the draw function again. \nThe available routines for drawing are documented on the GDK Drawing Primitives gdk3 Cairo Interaction page and the cairo documentation. \nTo receive mouse events on a drawing area you will need to enable them with gtk_widget_add_events. To receive keyboard events you will need to set the can focus property on the drawing area and you should probably draw some user visible indication that the drawing area is focused. Use gtk_widget_has_focus in your expose event handler to decide whether to draw the focus indicator. See gtk_render_focus for one way to draw focus. \nIf you need more complex control over your widget you should consider creating your own GtkWidget subclass. \n"});