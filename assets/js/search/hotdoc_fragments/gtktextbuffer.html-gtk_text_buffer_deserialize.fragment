fragment_downloaded_cb({"url": "gtktextbuffer.html#gtk_text_buffer_deserialize", "fragment": "Gtk.TextBuffer.deserialize \ngtk_text_buffer_deserialize \nGtk.prototype.deserialize \nThis function deserializes rich text in format format and inserts it at iter. \nformats to be used must be registered using Gtk.TextBuffer.register_deserialize_format or Gtk.TextBuffer.register_deserialize_tagset beforehand. \nParameters \nthe Gtk.TextBuffer format is registered with \nthe Gtk.TextBuffer to deserialize into \nthe rich text format to use for deserializing \ninsertion point for the deserialized text \ndata to deserialize \nlength of data \nTrue on success False otherwise. \nSince \nThis function deserializes rich text in format format and inserts it at iter. \nformats to be used must be registered using gtk_text_buffer_register_deserialize_format or gtk_text_buffer_register_deserialize_tagset beforehand. \nParameters \nthe GtkTextBuffer format is registered with \nthe GtkTextBuffer to deserialize into \nthe rich text format to use for deserializing \ninsertion point for the deserialized text \ndata to deserialize \nlength of data \nTRUE on success FALSE otherwise. \nSince \nThis function deserializes rich text in format format and inserts it at iter. \nformats to be used must be registered using Gtk.prototype.register_deserialize_format or Gtk.prototype.register_deserialize_tagset beforehand. \nParameters \nthe Gtk.TextBuffer format is registered with \nthe Gtk.TextBuffer to deserialize into \nthe rich text format to use for deserializing \ninsertion point for the deserialized text \ndata to deserialize \nlength of data \ntrue on success false otherwise. \nSince \n"});