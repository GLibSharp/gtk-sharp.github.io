fragment_downloaded_cb({"url": "gtktreestore.html#gtk_tree_store_insert_after", "fragment": "gtk_tree_store_insert_after \nGtk.TreeStore.insert_after \nGtk.prototype.insert_after \nInserts a new row after sibling. If sibling is NULL then the row will be prepended to parent s children. If parent and sibling are NULL then the row will be prepended to the toplevel. If both sibling and parent are set then parent must be the parent of sibling. When sibling is set parent is optional. \niter will be changed to point to this new row. The row will be empty after this function is called. To fill in values you need to call gtk_tree_store_set or gtk_tree_store_set_value. \nParameters \nA GtkTreeStore \nAn unset GtkTreeIter to set to the new row \nA valid GtkTreeIter or NULL \nA valid GtkTreeIter or NULL \nInserts a new row after sibling. If sibling is None then the row will be prepended to parent s children. If parent and sibling are None then the row will be prepended to the toplevel. If both sibling and parent are set then parent must be the parent of sibling. When sibling is set parent is optional. \niter will be changed to point to this new row. The row will be empty after this function is called. To fill in values you need to call gtk_tree_store_set not introspectable or Gtk.TreeStore.set_value. \nParameters \nA Gtk.TreeStore \nA valid Gtk.TreeIter or None \nA valid Gtk.TreeIter or None \nInserts a new row after sibling. If sibling is null then the row will be prepended to parent s children. If parent and sibling are null then the row will be prepended to the toplevel. If both sibling and parent are set then parent must be the parent of sibling. When sibling is set parent is optional. \niter will be changed to point to this new row. The row will be empty after this function is called. To fill in values you need to call gtk_tree_store_set not introspectable or Gtk.prototype.set_value. \nParameters \nA Gtk.TreeStore \nA valid Gtk.TreeIter or null \nA valid Gtk.TreeIter or null \n"});