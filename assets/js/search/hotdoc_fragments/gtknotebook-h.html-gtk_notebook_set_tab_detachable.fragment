fragment_downloaded_cb({"url": "gtknotebook-h.html#gtk_notebook_set_tab_detachable", "fragment": "gtk_notebook_set_tab_detachable \nGtk.prototype.set_tab_detachable \nGtk.Notebook.set_tab_detachable \nSets whether the tab can be detached from notebook to another notebook or widget. \nNote that notebooks must share a common group identificator see gtk_notebook_set_group_name to allow automatic tabs interchange between them. \nIf you want a widget to interact with a notebook through DnD i.e. accept dragged tabs from it it must be set as a drop destination and accept the target GTK_NOTEBOOK_TAB The notebook will fill the selection with a GtkWidget pointing to the child widget that corresponds to the dropped tab. \nNote that you should use gtk_notebook_detach_tab instead of gtk_container_remove if you want to remove the tab from the source notebook as part of accepting a drop. Otherwise the source notebook will think that the dragged tab was removed from underneath the ongoing drag operation and will initiate a drag cancel animation. \nIf you want a notebook to accept drags from other widgets you will have to set your own DnD code to do it. \nParameters \na GtkNotebook \na child GtkWidget \nwhether the tab is detachable or not \nSince \nSets whether the tab can be detached from notebook to another notebook or widget. \nNote that notebooks must share a common group identificator see Gtk.prototype.set_group_name to allow automatic tabs interchange between them. \nIf you want a widget to interact with a notebook through DnD i.e. accept dragged tabs from it it must be set as a drop destination and accept the target GTK_NOTEBOOK_TAB The notebook will fill the selection with a GtkWidget pointing to the child widget that corresponds to the dropped tab. \nNote that you should use Gtk.prototype.detach_tab instead of Gtk.prototype.remove if you want to remove the tab from the source notebook as part of accepting a drop. Otherwise the source notebook will think that the dragged tab was removed from underneath the ongoing drag operation and will initiate a drag cancel animation. \nIf you want a notebook to accept drags from other widgets you will have to set your own DnD code to do it. \nParameters \na Gtk.Notebook \na child Gtk.Widget \nwhether the tab is detachable or not \nSince \nSets whether the tab can be detached from notebook to another notebook or widget. \nNote that notebooks must share a common group identificator see Gtk.Notebook.set_group_name to allow automatic tabs interchange between them. \nIf you want a widget to interact with a notebook through DnD i.e. accept dragged tabs from it it must be set as a drop destination and accept the target GTK_NOTEBOOK_TAB The notebook will fill the selection with a GtkWidget pointing to the child widget that corresponds to the dropped tab. \nNote that you should use Gtk.Notebook.detach_tab instead of Gtk.Container.remove if you want to remove the tab from the source notebook as part of accepting a drop. Otherwise the source notebook will think that the dragged tab was removed from underneath the ongoing drag operation and will initiate a drag cancel animation. \nIf you want a notebook to accept drags from other widgets you will have to set your own DnD code to do it. \nParameters \na Gtk.Notebook \na child Gtk.Widget \nwhether the tab is detachable or not \nSince \n"});