fragment_downloaded_cb({"url": "gtkstylecontext-h.html#page-description", "fragment": "GtkStyleContext is an object that stores styling information affecting a widget defined by GtkWidgetPath. \nIn order to construct the final style information GtkStyleContext queries information from all attached GtkStyleProvider. Style providers can be either attached explicitly to the context through gtk_style_context_add_provider or to the screen through gtk_style_context_add_provider_for_screen. The resulting style is a combination of all providers information in priority order. \nFor GTK widgets any GtkStyleContext returned by gtk_widget_get_style_context will already have a GtkWidgetPath a GdkScreen and RTL LTR information set. The style context will also be updated automatically if any of these settings change on the widget. \nIf you are using the theming layer standalone you will need to set a widget path and a screen yourself to the created style context through gtk_style_context_set_path and gtk_style_context_set_screen as well as updating the context yourself using gtk_style_context_invalidate whenever any of the conditions change such as a change in the GtkSettings gtk theme name setting or a hierarchy change in the rendered widget. See the Foreign drawing example in gtk3 demo. \nWidgets can add style classes to their context which can be used to associate different styles by class. The documentation for individual widgets lists which style classes it uses itself and which style classes may be added by applications to affect their appearance. \nGTK defines macros for a number of style classes. \nIf you are developing a library with custom GtkWidget that render differently than standard components you may need to add a GtkStyleProvider yourself with the GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority either a GtkCssProvider or a custom object implementing the GtkStyleProvider interface. This way themes may still attempt to style your UI elements in a different way if needed so. \nIf you are using custom styling on an applications you probably want then to make your style information prevail to the theme s so you must use a GtkStyleProvider with the GTK_STYLE_PROVIDER_PRIORITY_APPLICATION priority keep in mind that the user settings in XDG_CONFIG_HOME gtk gtk.css will still take precedence over your changes as it uses the GTK_STYLE_PROVIDER_PRIORITY_USER priority. \n"});