fragment_downloaded_cb({"url": "gtklistbox-h.html#gtk_list_box_set_header_func", "fragment": "gtk_list_box_set_header_func \nGtk.prototype.set_header_func \nGtk.ListBox.set_header_func \nBy setting a header function on the box one can dynamically add headers in front of rows depending on the contents of the row and its position in the list. For instance one could use it to add headers in front of the first item of a new kind in a list sorted by the kind. \nThe update_header can look at the current header widget using gtk_list_box_row_get_header and either update the state of the widget as needed or set a new one using gtk_list_box_row_set_header. If no header is needed set the header to NULL. \nNote that you may get many calls update_header to this for a particular row when e.g. changing things that don t affect the header. In this case it is important for performance to not blindly replace an existing header with an identical one. \nThe update_header function will be called for each row after the call and it will continue to be called each time a row changes via gtk_list_box_row_changed and when the row before changes either by gtk_list_box_row_changed on the previous row or when the previous row becomes a different row It is also called for all rows when gtk_list_box_invalidate_headers is called. \nParameters \na GtkListBox \ncallback that lets you add row headers \nuser data passed to update_header \ndestroy notifier for user_data \nSince \nBy setting a header function on the box one can dynamically add headers in front of rows depending on the contents of the row and its position in the list. For instance one could use it to add headers in front of the first item of a new kind in a list sorted by the kind. \nThe update_header can look at the current header widget using Gtk.prototype.get_header and either update the state of the widget as needed or set a new one using Gtk.prototype.set_header. If no header is needed set the header to null. \nNote that you may get many calls update_header to this for a particular row when e.g. changing things that don t affect the header. In this case it is important for performance to not blindly replace an existing header with an identical one. \nThe update_header function will be called for each row after the call and it will continue to be called each time a row changes via Gtk.prototype.changed and when the row before changes either by Gtk.prototype.changed on the previous row or when the previous row becomes a different row It is also called for all rows when Gtk.prototype.invalidate_headers is called. \nParameters \na Gtk.ListBox \ncallback that lets you add row headers \nuser data passed to update_header \ndestroy notifier for user_data \nSince \nBy setting a header function on the box one can dynamically add headers in front of rows depending on the contents of the row and its position in the list. For instance one could use it to add headers in front of the first item of a new kind in a list sorted by the kind. \nThe update_header can look at the current header widget using Gtk.ListBoxRow.get_header and either update the state of the widget as needed or set a new one using Gtk.ListBoxRow.set_header. If no header is needed set the header to None. \nNote that you may get many calls update_header to this for a particular row when e.g. changing things that don t affect the header. In this case it is important for performance to not blindly replace an existing header with an identical one. \nThe update_header function will be called for each row after the call and it will continue to be called each time a row changes via Gtk.ListBoxRow.changed and when the row before changes either by Gtk.ListBoxRow.changed on the previous row or when the previous row becomes a different row It is also called for all rows when Gtk.ListBox.invalidate_headers is called. \nParameters \na Gtk.ListBox \ncallback that lets you add row headers \nuser data passed to update_header \ndestroy notifier for user_data \nSince \n"});