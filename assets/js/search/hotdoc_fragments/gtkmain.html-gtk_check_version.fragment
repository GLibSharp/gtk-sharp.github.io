fragment_downloaded_cb({"url": "gtkmain.html#gtk_check_version", "fragment": "gtk_check_version \nprototype.check_version \nGtk.check_version \nChecks that the GTK library in use is compatible with the given version. Generally you would pass in the constants GTK_MAJOR_VERSION GTK_MINOR_VERSION GTK_MICRO_VERSION as the three arguments to this function that produces a check that the library in use is compatible with the version of GTK the application or module was compiled against. \nCompatibility is defined by two things first the version of the running library is newer than the version required_major.required_minor. required_micro. Second the running library must be binary compatible with the version required_major.required_minor. required_micro same major version. \nThis function is primarily for GTK modules the module can call this function to check that it wasn t loaded into an incompatible version of GTK However such a check isn t completely reliable since the module may be linked against an old version of GTK and calling the old version of gtk_check_version but still get loaded into an application using a newer version of GTK \nParameters \nthe required major version \nthe required minor version \nthe required micro version \nNULL if the GTK library is compatible with the given version or a string describing the version mismatch. The returned string is owned by GTK and should not be modified or freed. \nChecks that the GTK library in use is compatible with the given version. Generally you would pass in the constants Gtk.MAJOR_VERSION Gtk.MINOR_VERSION Gtk.MICRO_VERSION as the three arguments to this function that produces a check that the library in use is compatible with the version of GTK the application or module was compiled against. \nCompatibility is defined by two things first the version of the running library is newer than the version required_major.required_minor. required_micro. Second the running library must be binary compatible with the version required_major.required_minor. required_micro same major version. \nThis function is primarily for GTK modules the module can call this function to check that it wasn t loaded into an incompatible version of GTK However such a check isn t completely reliable since the module may be linked against an old version of GTK and calling the old version of prototype.check_version but still get loaded into an application using a newer version of GTK \nParameters \nthe required major version \nthe required minor version \nthe required micro version \nnull if the GTK library is compatible with the given version or a string describing the version mismatch. The returned string is owned by GTK and should not be modified or freed. \nChecks that the GTK library in use is compatible with the given version. Generally you would pass in the constants Gtk.MAJOR_VERSION Gtk.MINOR_VERSION Gtk.MICRO_VERSION as the three arguments to this function that produces a check that the library in use is compatible with the version of GTK the application or module was compiled against. \nCompatibility is defined by two things first the version of the running library is newer than the version required_major.required_minor. required_micro. Second the running library must be binary compatible with the version required_major.required_minor. required_micro same major version. \nThis function is primarily for GTK modules the module can call this function to check that it wasn t loaded into an incompatible version of GTK However such a check isn t completely reliable since the module may be linked against an old version of GTK and calling the old version of Gtk.check_version but still get loaded into an application using a newer version of GTK \nParameters \nthe required major version \nthe required minor version \nthe required micro version \nNone if the GTK library is compatible with the given version or a string describing the version mismatch. The returned string is owned by GTK and should not be modified or freed. \n"});