fragment_downloaded_cb({"url": "gtkwindow-h.html#gtk_window_stick", "fragment": "gtk_window_stick \nGtk.prototype.stick \nGtk.Window.stick \nAsks to stick window which means that it will appear on all user desktops. Note that you shouldn t assume the window is definitely stuck afterward because other entities e.g. the user or window manager gtk X11 arch could unstick it again and some window managers do not support sticking windows. But normally the window will end up stuck. Just don t write code that crashes if not. \nIt s permitted to call this function before showing a window. \nYou can track stickiness via the window state event signal on GtkWidget. \nParameters \na GtkWindow \nAsks to stick window which means that it will appear on all user desktops. Note that you shouldn t assume the window is definitely stuck afterward because other entities e.g. the user or window manager gtk X11 arch could unstick it again and some window managers do not support sticking windows. But normally the window will end up stuck. Just don t write code that crashes if not. \nIt s permitted to call this function before showing a window. \nYou can track stickiness via the window state event signal on Gtk.Widget. \nParameters \na Gtk.Window \nAsks to stick window which means that it will appear on all user desktops. Note that you shouldn t assume the window is definitely stuck afterward because other entities e.g. the user or window manager gtk X11 arch could unstick it again and some window managers do not support sticking windows. But normally the window will end up stuck. Just don t write code that crashes if not. \nIt s permitted to call this function before showing a window. \nYou can track stickiness via the window state event signal on Gtk.Widget. \nParameters \na Gtk.Window \n"});