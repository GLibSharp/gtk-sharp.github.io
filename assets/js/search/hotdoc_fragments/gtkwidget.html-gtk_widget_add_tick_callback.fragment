fragment_downloaded_cb({"url": "gtkwidget.html#gtk_widget_add_tick_callback", "fragment": "gtk_widget_add_tick_callback \nGtk.prototype.add_tick_callback \nGtk.Widget.add_tick_callback \nQueues an animation frame update and adds a callback to be called before each frame. Until the tick callback is removed it will be called frequently usually at the frame rate of the output device or as quickly as the application can be repainted whichever is slower For this reason is most suitable for handling graphics that change every frame or every few frames. The tick callback does not automatically imply a relayout or repaint. If you want a repaint or relayout and aren t changing widget properties that would trigger that for example changing the text of a GtkLabel then you will have to call gtk_widget_queue_resize or gtk_widget_queue_draw_area yourself. \ngdk_frame_clock_get_frame_time should generally be used for timing continuous animations and gdk_frame_timings_get_predicted_presentation_time if you are trying to display isolated frames at particular times. \nThis is a more convenient alternative to connecting directly to the update signal of GdkFrameClock since you don t have to worry about when a GdkFrameClock is assigned to a widget. \nParameters \na GtkWidget \nfunction to call for updating animations \ndata to pass to callback \nfunction to call to free user_data when the callback is removed. \nan id for the connection of this callback. Remove the callback by passing it to gtk_widget_remove_tick_callback \nSince \nQueues an animation frame update and adds a callback to be called before each frame. Until the tick callback is removed it will be called frequently usually at the frame rate of the output device or as quickly as the application can be repainted whichever is slower For this reason is most suitable for handling graphics that change every frame or every few frames. The tick callback does not automatically imply a relayout or repaint. If you want a repaint or relayout and aren t changing widget properties that would trigger that for example changing the text of a Gtk.Label then you will have to call Gtk.prototype.queue_resize or Gtk.prototype.queue_draw_area yourself. \nGdk.prototype.get_frame_time should generally be used for timing continuous animations and Gdk.prototype.get_predicted_presentation_time if you are trying to display isolated frames at particular times. \nThis is a more convenient alternative to connecting directly to the update signal of Gdk.FrameClock since you don t have to worry about when a Gdk.FrameClock is assigned to a widget. \nParameters \na Gtk.Widget \nfunction to call for updating animations \ndata to pass to callback \nfunction to call to free user_data when the callback is removed. \nan id for the connection of this callback. Remove the callback by passing it to Gtk.prototype.remove_tick_callback \nSince \nQueues an animation frame update and adds a callback to be called before each frame. Until the tick callback is removed it will be called frequently usually at the frame rate of the output device or as quickly as the application can be repainted whichever is slower For this reason is most suitable for handling graphics that change every frame or every few frames. The tick callback does not automatically imply a relayout or repaint. If you want a repaint or relayout and aren t changing widget properties that would trigger that for example changing the text of a Gtk.Label then you will have to call Gtk.Widget.queue_resize or Gtk.Widget.queue_draw_area yourself. \nGdk.FrameClock.get_frame_time should generally be used for timing continuous animations and Gdk.FrameTimings.get_predicted_presentation_time if you are trying to display isolated frames at particular times. \nThis is a more convenient alternative to connecting directly to the update signal of Gdk.FrameClock since you don t have to worry about when a Gdk.FrameClock is assigned to a widget. \nParameters \na Gtk.Widget \nfunction to call for updating animations \ndata to pass to callback \nfunction to call to free user_data when the callback is removed. \nan id for the connection of this callback. Remove the callback by passing it to Gtk.Widget.remove_tick_callback \nSince \n"});