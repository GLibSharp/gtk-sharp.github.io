fragment_downloaded_cb({"url": "gtkwidget.html#gtk_widget_destroy", "fragment": "gtk_widget_destroy \nGtk.Widget.destroy \nGtk.prototype.destroy \nDestroys a widget. \nWhen a widget is destroyed all references it holds on other objects will be released \nIt s expected that all references held on the widget will also be released you should connect to the destroy signal if you hold a reference to widget and you wish to remove it when this function is called. It is not necessary to do so if you are implementing a GtkContainer as you ll be able to use the remove virtual function for that. \nIt s important to notice that gtk_widget_destroy will only cause the widget to be finalized if no additional references acquired using g_object_ref are held on it. In case additional references are in place the widget will be in an inert state after calling this function widget will still point to valid memory allowing you to release the references you hold but you may not query the widget s own state. \nYou should typically call this function on top level widgets and rarely on child widgets. \nSee also gtk_container_remove \nParameters \na GtkWidget \nDestroys a widget. \nWhen a widget is destroyed all references it holds on other objects will be released \nIt s expected that all references held on the widget will also be released you should connect to the destroy signal if you hold a reference to widget and you wish to remove it when this function is called. It is not necessary to do so if you are implementing a Gtk.Container as you ll be able to use the ContainerClass.remove virtual function for that. \nIt s important to notice that Gtk.Widget.destroy will only cause the widget to be finalized if no additional references acquired using GObject.Object.ref are held on it. In case additional references are in place the widget will be in an inert state after calling this function widget will still point to valid memory allowing you to release the references you hold but you may not query the widget s own state. \nYou should typically call this function on top level widgets and rarely on child widgets. \nSee also Gtk.Container.remove \nParameters \na Gtk.Widget \nDestroys a widget. \nWhen a widget is destroyed all references it holds on other objects will be released \nIt s expected that all references held on the widget will also be released you should connect to the destroy signal if you hold a reference to widget and you wish to remove it when this function is called. It is not necessary to do so if you are implementing a Gtk.Container as you ll be able to use the ContainerClass.remove virtual function for that. \nIt s important to notice that Gtk.prototype.destroy will only cause the widget to be finalized if no additional references acquired using GObject.prototype.ref are held on it. In case additional references are in place the widget will be in an inert state after calling this function widget will still point to valid memory allowing you to release the references you hold but you may not query the widget s own state. \nYou should typically call this function on top level widgets and rarely on child widgets. \nSee also Gtk.prototype.remove \nParameters \na Gtk.Widget \n"});