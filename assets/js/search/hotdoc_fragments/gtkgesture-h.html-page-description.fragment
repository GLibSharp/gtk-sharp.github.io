fragment_downloaded_cb({"url": "gtkgesture-h.html#page-description", "fragment": "GtkGesture is the base object for gesture recognition although this object is quite generalized to serve as a base for multi touch gestures it is suitable to implement single touch and pointer based gestures using the special NULL GdkEventSequence value for these \nThe number of touches that a GtkGesture need to be recognized is controlled by the GtkGesture n points property if a gesture is keeping track of less or more than that number of sequences it won t check wether the gesture is recognized. \nAs soon as the gesture has the expected number of touches the gesture will run the GtkGesture check signal regularly on input events until the gesture is recognized the criteria to consider a gesture as recognized is left to GtkGesture subclasses. \nA recognized gesture will then emit the following signals \nIn order to receive events a gesture needs to either set a propagation phase through gtk_event_controller_set_propagation_phase or feed those manually through gtk_event_controller_handle_event. \nIn the capture phase events are propagated from the toplevel down to the target widget and gestures that are attached to containers above the widget get a chance to interact with the event before it reaches the target. \nAfter the capture phase GTK emits the traditional GtkWidget button press event GtkWidget button release event GtkWidget touch event etc signals. Gestures with the GTK_PHASE_TARGET phase are fed events from the default GtkWidget event handlers. \nIn the bubble phase events are propagated up from the target widget to the toplevel and gestures that are attached to containers above the widget get a chance to interact with events that have not been handled yet. \nWhenever input interaction happens a single event may trigger a cascade of GtkGesture both across the parents of the widget receiving the event and in parallel within an individual widget. It is a responsibility of the widgets using those gestures to set the state of touch sequences accordingly in order to enable cooperation of gestures around the GdkEventSequence triggering those. \nWithin a widget gestures can be grouped through gtk_gesture_group grouped gestures synchronize the state of sequences so calling gtk_gesture_set_sequence_state on one will effectively propagate the state throughout the group. \nBy default all sequences start out in the GTK_EVENT_SEQUENCE_NONE state sequences in this state trigger the gesture event handler but event propagation will continue unstopped by gestures. \nIf a sequence enters into the GTK_EVENT_SEQUENCE_DENIED state the gesture group will effectively ignore the sequence letting events go unstopped through the gesture but the slot will still remain occupied while the touch is active. \nIf a sequence enters in the GTK_EVENT_SEQUENCE_CLAIMED state the gesture group will grab all interaction on the sequence by \nNote if a sequence is set early to GTK_EVENT_SEQUENCE_CLAIMED on GDK_TOUCH_BEGIN GDK_BUTTON_PRESS so those events are captured before reaching the event widget this implies GTK_PHASE_CAPTURE one similar event will emulated if the sequence changes to GTK_EVENT_SEQUENCE_DENIED. This way event coherence is preserved before event propagation is unstopped again. \nSequence states can t be changed freely see gtk_gesture_set_sequence_state to know about the possible lifetimes of a GdkEventSequence. \nOn the platforms that support it GtkGesture will handle transparently touchpad gesture events. The only precautions users of GtkGesture should do to enable this support are \n"});