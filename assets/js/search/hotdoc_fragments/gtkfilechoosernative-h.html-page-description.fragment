fragment_downloaded_cb({"url": "gtkfilechoosernative-h.html#page-description", "fragment": "GtkFileChooserNative is an abstraction of a dialog box suitable for use with File Open or File Save as commands. By default this just uses a GtkFileChooserDialog to implement the actual dialog. However on certain platforms such as Windows and macOS the native platform file chooser is used instead. When the application is running in a sandboxed environment without direct filesystem access such as Flatpak GtkFileChooserNative may call the proper APIs portals to let the user choose a file and make it available to the application. \nWhile the API of GtkFileChooserNative closely mirrors GtkFileChooserDialog the main difference is that there is no access to any GtkWindow or GtkWidget for the dialog. This is required as there may not be one in the case of a platform native dialog. Showing hiding and running the dialog is handled by the GtkNativeDialog functions. \nIn the simplest of cases you can the following code to use GtkFileChooserDialog to select a file for opening \nTo use a dialog for saving you can use this \nFor more information on how to best set up a file dialog see GtkFileChooserDialog. \nGtkFileChooserNative inherits from GtkNativeDialog which means it will return GTK_RESPONSE_ACCEPT if the user accepted and GTK_RESPONSE_CANCEL if he pressed cancel. It can also return GTK_RESPONSE_DELETE_EVENT if the window was unexpectedly closed. \nThere are a few things in the GtkFileChooser API that are not possible to use with GtkFileChooserNative as such use would prohibit the use of a native dialog. \nThere is no support for the signals that are emitted when the user navigates in the dialog including \nYou can also not use the methods that directly control user navigation \nIf you need any of the above you will have to use GtkFileChooserDialog directly. \nNo operations that change the the dialog work while the dialog is visible. Set all the properties that are required before showing the dialog. \nOn windows the IFileDialog implementation added in Windows Vista is used. It supports many of the features that GtkFileChooserDialog does but there are some things it does not handle \nExtra widgets added with gtk_file_chooser_set_extra_widget. \nUse of custom previews by connecting to GtkFileChooser update preview. \nAny GtkFileFilter added using a mimetype or custom filter. \nIf any of these features are used the regular GtkFileChooserDialog will be used in place of the native one. \nWhen the org.freedesktop.portal.FileChooser portal is available on the session bus it is used to bring up an out of process file chooser. Depending on the kind of session the application is running in this may or may not be a GTK file chooser. In this situation the following things are not supported and will be silently ignored \nExtra widgets added with gtk_file_chooser_set_extra_widget. \nUse of custom previews by connecting to GtkFileChooser update preview. \nAny GtkFileFilter added with a custom filter. \nOn macOS the NSSavePanel and NSOpenPanel classes are used to provide native file chooser dialogs. Some features provided by GtkFileChooserDialog are not supported \nExtra widgets added with gtk_file_chooser_set_extra_widget unless the widget is an instance of GtkLabel in which case the label text will be used to set the NSSavePanel message instance property. \nUse of custom previews by connecting to GtkFileChooser update preview. \nAny GtkFileFilter added with a custom filter. \nShortcut folders. \n"});