fragment_downloaded_cb({"url": "glossary.html#page-description", "fragment": "allocation \nThe final size of a widget within its parent. For example a widget may request a minimum size of pixels but its parent may decide to allocate pixels for it instead. \nSee also requisition. \nbin \nA container that can hold at most one child widget. The base class for bins is GtkBin. \nSee also container. \nchild \nA container s child is a widget contained inside it. \ncolumn \nGTK contains several widgets which display data in columns e.g. the GtkTreeView. These view columns in the tree view are represented by GtkTreeViewColumn objects inside GTK They should not be confused with model columns which are used to organize the data in tree models. \nSee also model view widget. \ncontainer \nA widget that contains other widgets in that case the container is the parent of the child widgets. Some containers don t draw anything on their own but rather just organize their children s geometry for example GtkVBox lays out its children vertically without painting anything on its own. Other containers include decorative elements for example GtkFrame contains the frame s child and a label in addition to the shaded frame it draws. The base class for containers is GtkContainer. \nSee also widget geometry. \ndisplay \nGDK inherited the concept of display from the X window system which considers a display to be the combination of a keyboard a pointing device and one or more screens. Applications open a display to show windows and interact with the user. In GDK a display is represented by a GdkDisplay. \nEllipsization is the process of replacing some part of a text by an ellipsis usually to make the text fit in a smaller space. Pango can ellipsize text at the beginning at the end or in the middle. \nevent \nEvents are the way in which GDK informs GTK about external events like pointer motion button clicks key presses etc. \ngeometry \nA widget s position and size. Within its parent this is called the widget s allocation. \nmapping \nThis is the step in a widget s life cycle where it actually shows the GdkWindows it created when it was realized. When a widget is mapped it must turn on its GTK_MAPPED flag. \nNote that due to the asynchronous nature of the X window system a widget s window may not appear on the screen immediatly after one calls gdk_window_show you must wait for the corresponding map event to be received. You can do this with the GtkWidget map event signal. \nmodel column \nA column in a tree model holding data of a certain type. The types which can be stored in the columns of a model have to be specified when the model is constructed see e.g. gtk_list_store_new \nSee also view column. \nmodel view widget \nThese widgets follow the well known model view pattern which separates the data the model to be displayed from the component which does the actual visualization the view Examples of this pattern in GTK are the GtkTreeView GtkTreeModel and GtkTextView GtkTextBuffer \nOne important advantage of this pattern is that it is possible to display the same model in multiple views another one that the separation of the model allows a great deal of flexibility as demonstrated by e.g. GtkTreeModelSort or GtkTreeModelFilter. \nno window widget \nA widget that does not have a GdkWindow of its own on which to draw its contents but rather shares its parent s. This can be tested with the gtk_widget_get_has_window function. \nparent \nA widget s parent is the container inside which it resides. \nrealization \nThis is the step in a widget s life cycle where it creates its own GdkWindow or otherwise associates itself with its parent s GdkWindow. If the widget has its own window then it must also attach a style to it. A widget becomes unrealized by destroying its associated GdkWindow. When a widget is realized it must turn on its GTK_REALIZED flag. \nWidgets that don t own the GdkWindow on which they draw are called no window widgets. This can be tested with the gtk_widget_get_has_window function. Normally these widgets draw on their parent s GdkWindow. \nNote that when a GtkWidget creates a window in its GtkWidget realize handler it does not actually show the window. That is the window s structure is just created in memory. The widget actually shows the window when it gets mapped. \nrequisition \nThe size requisition of a widget is the minimum amount of space it requests from its parent. Once the parent computes the widget s final size it gives it its size allocation. \nSee also allocation. \nscreen \nGDK inherited the concept of screen from the X window system which considers a screen to be a rectangular area on which applications may place their windows. Screens under X may have quite dissimilar visuals. Each screen can stretch across multiple physical monitors. \nIn GDK screens are represented by GdkScreen objects. \nstyle \nA style encapsulates what GTK needs to know in order to draw a widget. Styles can be modified with resource files. \ntoplevel \nA widget that does not require a parent container. The only toplevel widgets in GTK are GtkWindow and widgets derived from it. \nSee also container. \nunmap \nSee mapping. \nunrealize \nSee realization. \nview column \nA displayed column in a tree view represented by a GtkTreeViewColumn object. \nSee also model column. \nvisual \nA visual describes how color information is stored in pixels. A screen may support multiple visuals. On modern hardware the most common visuals are truecolor visuals which store a fixed number of bits typically for the red green and blue components of a color. \nOn ancient hardware one may still meet indexed visuals which store color information as an index into a color map or even monochrome visuals. \nwidget \nA control in a graphical user interface. Widgets can draw themselves and process events from the mouse and keyboard. Widget types include buttons menus text entry lines and lists. Widgets can be arranged into containers and these take care of assigning the geometry of the widgets every widget thus has a parent except those widgets which are toplevels. The base class for widgets is GtkWidget. \nSee also container. \n"});