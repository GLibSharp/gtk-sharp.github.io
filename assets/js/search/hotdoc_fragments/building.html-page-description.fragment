fragment_downloaded_cb({"url": "building.html#page-description", "fragment": "Before we get into the details of how to compile GTK we should mention that in many cases binary packages of GTK prebuilt for your operating system will be available either from your operating system vendor or from independent sources. If such a set of packages is available installing it will get you programming with GTK much faster than building it yourself. In fact you may well already have GTK installed on your system already. \nIn order to build GTK you will need meson installed on your system. On Linux and other UNIX like operating systems you will also need ninja. This guide does not cover how to install these two requirements but you can refer to the Meson website for more information. The Ninja build tool is also usable on various operating systems so we will refer to it in the examples. \nIf you are building GTK from a source distribution or from a Git clone you will need to use meson to configure the project. The most commonly useful argument is the prefix one which determines where the files will go once installed. To install GTK under a prefix like opt gtk you would run Meson as \nMeson will create the builddir directory and place all the build artefacts there. \nYou can get a list of all available options for the build by running meson configure. \nAfter Meson successfully configured the build directory you then can run the build using Ninja \nIf you don t have permission to write to the directory you are installing in you may have to change to root temporarily before running ninja install. \nSeveral environment variables are useful to pass to set before running configure. CPPFLAGS contains options to pass to the C compiler and is used to tell the compiler where to look for include files. The LDFLAGS variable is used in a similar fashion for the linker. Finally the PKG_CONFIG_PATH environment variable contains a search path that pkg config see below uses when looking for files describing how to compile programs using different libraries. If you were installing GTK and it s dependencies into opt gtk you might want to set these variables as \nYou may also need to set the LD_LIBRARY_PATH environment variable so the systems dynamic linker can find the newly installed libraries and the PATH environment program so that utility binaries installed by the various libraries will be found. \nBefore you can compile the GTK widget toolkit you need to have various other tools and libraries installed on your system. Dependencies of GTK have their own build systems so you will need to refer to their own installation instructions. \nA particular important tool used by GTK to find its dependencies is pkg config. \npkg config is a tool for tracking the compilation flags needed for libraries that are used by the GTK libraries. For each library a small pc text file is installed in a standard location that contains the compilation flags needed for that library along with version number information. \nSome of the libraries that GTK depends on are maintained by by the GTK team GLib GdkPixbuf Pango ATK and GObject Introspection. Other libraries are maintained separately. \nThe GLib library provides core non graphical functionality such as high level data types Unicode manipulation and an object and type system to C programs. It is available from here. \nThe GdkPixbuf library provides facilities for loading images in a variety of file formats. It is available here. \nPango is a library for internationalized text handling. It is available here. \nATK is the Accessibility Toolkit. It provides a set of generic interfaces allowing accessibility technologies such as screen readers to interact with a graphical user interface. It is available here. \nGobject Introspection is a framework for making introspection data available to language bindings. It is available here. \nThe GNU libiconv library is needed to build GLib if your system doesn t have the iconv function for doing conversion between character encodings. Most modern systems should have iconv \nThe libintl library from the GNU gettext package is needed if your system doesn t have the gettext functionality for handling message translation databases. \nThe libraries from the X window system are needed to build Pango and GTK You should already have these installed on your system but it s possible that you ll need to install the development environment for these libraries that your operating system vendor provides. \nThe fontconfig library provides Pango with a standard way of locating fonts and matching them against font names. \nCairo is a graphics library that supports vector graphics and image compositing. Both Pango and GTK use Cairo for drawing. \nlibepoxy is a library that abstracts the differences between different OpenGL libraries. GTK uses it for cross platform GL support and for its own drawing. \nGraphene is a library that provides vector and matrix types for D and D transformations. GTK uses it internally for drawing. \nThe Wayland libraries are needed to build GTK with the Wayland backend. \nThe shared mime info package is not a hard dependency of GTK but it contains definitions for mime types that are used by GIO and indirectly by GTK gdk pixbuf will use GIO for mime type detection if possible. For this to work shared mime info needs to be installed and XDG_DATA_DIRS set accordingly at configure time. Otherwise gdk pixbuf falls back to its built in mime type detection. \nFirst make sure that you have the necessary external dependencies installed pkg config Meson Ninja the JPEG PNG and TIFF libraries FreeType and if necessary libiconv and libintl. To get detailed information about building these packages see the documentation provided with the individual packages. On any average Linux system it s quite likely you ll have all of these installed already or they will be easily accessible through your operating system package repositories. \nThen build and install the GTK libraries in the order GLib Cairo Pango ATK then GTK For each library follow the instructions they provide and make sure to share common settings between them and the GTK build if you are using a separate prefix for GTK for instance you will need to use the same prefix for all its dependencies you build. If you re lucky this will all go smoothly and you ll be ready to start compiling your own GTK applications. You can test your GTK installation by running the gtk4 demo program that GTK installs. \nIf one of the projects you re configuring or building fails look closely at the error messages printed these will often provide useful information as to what went wrong. Every build system has its own log that can help you understand the issue you re encountering. If all else fails you can ask for help on the gtk list mailing list. See Mailing lists and bug reports for more information. \nIn addition to the normal options provided by Meson GTK defines various arguments that modify what should be built. meson Ddisable modules true Ddisable modules false Dwith included immodules MODULE1 MODULE2 Dwith included immodules all Dwith included immodules none Ddocumentation true Ddocumentation false Dman pages true Dman pages false Denable cups print backend yes Denable cups print backend no Denable cups print backend auto Denable papi print backend yes Denable papi print backend no Denable papi print backend auto Denable cloudprint print backend yes Denable cloudprint print backend no Denable cloudprint print backend auto Denable test print backend yes Denable test print backend no Denable test print backend auto Denable colord yes Denable colord no Denable colord auto Denable vulkan yes Denable vulkan no Denable vulkan auto Denable x11 backend true Denable x11 backend false Denable xinerama true Denable xinerama false Denable win32 backend true Denable win32 backend false Denable quartz backend true Denable quartz backend false Denable broadway backend true Denable broadway backend false Denable wayland backend true Denable wayland backend false Denable mir backend true Denable mir backend false Dintrospection true Dintrospection false \ndisable modules. \nNormally GTK will try to build the input method modules as little shared libraries that are loaded on demand. The disable modules option indicates that they should all be built statically into the GTK library instead. This is useful for people who need to produce statically linked binaries. If disable modules is not specified then the configure script will try to auto detect whether shared modules work on your system. \nwith included immodules. \nThis option allows you to specify which input method modules you want to include directly into the GTK shared library as opposed to building them as loadable modules. \nenable xinerama. \nBy default GTK will try to link against the Xinerama libraries if they are found. This options can be used to explicitly control whether Xinerama should be used. \nenable documentation and enable man pages. \nThe gtk doc package is used to generate the reference documentation included with GTK By default support for gtk doc is disabled because it requires various extra dependencies to be installed. If you have gtk doc installed and are modifying GTK you may want to enable gtk doc support by passing in enable documentation. \nAdditionally some tools provided by GTK have their own manual pages generated using a similar set of dependencies if you have xsltproc then you can generate manual pages by passing enable man pages when configuring the build. \nenable cups print backend enable papi print backend enable cloudprint print backend and enable test print backend. \nBy default GTK will try to build various print backends if their dependencies are found. These options can be used to explicitly control whether each print backend should be built or not. \nenable x11 backend enable win32 backend enable quartz backend enable broadway backend enable wayland backend and enable mir backend. \nEnable specific backends for GDK. If none of these options are given the Wayland backend will be enabled by default if the platform is Linux the X11 backend will also be enabled by default unless the platform is Windows in which case the default is win32 or the platform is macOS in which case the default is quartz. If any backend is explicitly enabled or disabled no other platform will be enabled automatically. \nintrospection. \nAllows to disable building introspection support. This is option is mainly useful for shortening turnaround times on developer systems. Installed builds of GTK should always have introspection support. \nbuild tests demos. \nBy default GTK will build quite a few tests and demos. While these are useful on a developer system they are not needed when GTK is built e.g. for a flatpak runtime. These options allow to disable building tests and demos. \n"});