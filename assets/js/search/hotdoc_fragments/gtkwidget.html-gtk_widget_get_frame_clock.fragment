fragment_downloaded_cb({"url": "gtkwidget.html#gtk_widget_get_frame_clock", "fragment": "gtk_widget_get_frame_clock \nGtk.Widget.get_frame_clock \nGtk.prototype.get_frame_clock \nObtains the frame clock for a widget. The frame clock is a global ticker that can be used to drive animations and repaints. The most common reason to get the frame clock is to call gdk_frame_clock_get_frame_time in order to get a time to use for animating. For example you might record the start of the animation with an initial value from gdk_frame_clock_get_frame_time and then update the animation by calling gdk_frame_clock_get_frame_time again during each repaint. \ngdk_frame_clock_request_phase will result in a new frame on the clock but won t necessarily repaint any widgets. To repaint a widget you have to use gtk_widget_queue_draw which invalidates the widget thus scheduling it to receive a draw on the next frame gtk_widget_queue_draw will also end up requesting a frame on the appropriate frame clock. \nA widget s frame clock will not change while the widget is mapped. Reparenting a widget which implies a temporary unmap can change the widget s frame clock. \nUnrealized widgets do not have a frame clock. \nParameters \na GtkWidget \na GdkFrameClock or NULL if widget is unrealized \nSince \nObtains the frame clock for a widget. The frame clock is a global ticker that can be used to drive animations and repaints. The most common reason to get the frame clock is to call Gdk.FrameClock.get_frame_time in order to get a time to use for animating. For example you might record the start of the animation with an initial value from Gdk.FrameClock.get_frame_time and then update the animation by calling Gdk.FrameClock.get_frame_time again during each repaint. \nGdk.FrameClock.request_phase will result in a new frame on the clock but won t necessarily repaint any widgets. To repaint a widget you have to use Gtk.Widget.queue_draw which invalidates the widget thus scheduling it to receive a draw on the next frame Gtk.Widget.queue_draw will also end up requesting a frame on the appropriate frame clock. \nA widget s frame clock will not change while the widget is mapped. Reparenting a widget which implies a temporary unmap can change the widget s frame clock. \nUnrealized widgets do not have a frame clock. \nParameters \na Gtk.Widget \na Gdk.FrameClock or None if widget is unrealized \nSince \nObtains the frame clock for a widget. The frame clock is a global ticker that can be used to drive animations and repaints. The most common reason to get the frame clock is to call Gdk.prototype.get_frame_time in order to get a time to use for animating. For example you might record the start of the animation with an initial value from Gdk.prototype.get_frame_time and then update the animation by calling Gdk.prototype.get_frame_time again during each repaint. \nGdk.prototype.request_phase will result in a new frame on the clock but won t necessarily repaint any widgets. To repaint a widget you have to use Gtk.prototype.queue_draw which invalidates the widget thus scheduling it to receive a draw on the next frame Gtk.prototype.queue_draw will also end up requesting a frame on the appropriate frame clock. \nA widget s frame clock will not change while the widget is mapped. Reparenting a widget which implies a temporary unmap can change the widget s frame clock. \nUnrealized widgets do not have a frame clock. \nParameters \na Gtk.Widget \na Gdk.FrameClock or null if widget is unrealized \nSince \n"});