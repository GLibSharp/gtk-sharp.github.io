fragment_downloaded_cb({"url": "gtkgesture.html#gtk_gesture_set_sequence_state", "fragment": "gtk_gesture_set_sequence_state \nGtk.Gesture.set_sequence_state \nGtk.prototype.set_sequence_state \nSets the state of sequence in gesture. Sequences start in state GTK_EVENT_SEQUENCE_NONE and whenever they change state they can never go back to that state. Likewise sequences in state GTK_EVENT_SEQUENCE_DENIED cannot turn back to a not denied state. With these rules the lifetime of an event sequence is constrained to the next four \nNote Due to event handling ordering it may be unsafe to set the state on another gesture within a begin signal handler as the callback might be executed before the other gesture knows about the sequence. A safe way to perform this could be \nIf both gestures are in the same group just set the state on the gesture emitting the event the sequence will be already be initialized to the group s global state when the second gesture processes the event. \nParameters \na GtkGesture \na GdkEventSequence \nthe sequence state \nTRUE if sequence is handled by gesture and the state is changed successfully \nSince \nSets the state of sequence in gesture. Sequences start in state Gtk.EventSequenceState.NONE and whenever they change state they can never go back to that state. Likewise sequences in state Gtk.EventSequenceState.DENIED cannot turn back to a not denied state. With these rules the lifetime of an event sequence is constrained to the next four \nNote Due to event handling ordering it may be unsafe to set the state on another gesture within a begin signal handler as the callback might be executed before the other gesture knows about the sequence. A safe way to perform this could be \nIf both gestures are in the same group just set the state on the gesture emitting the event the sequence will be already be initialized to the group s global state when the second gesture processes the event. \nParameters \na Gtk.Gesture \na Gdk.EventSequence \nthe sequence state \nTrue if sequence is handled by gesture and the state is changed successfully \nSince \nSets the state of sequence in gesture. Sequences start in state Gtk.EventSequenceState.NONE and whenever they change state they can never go back to that state. Likewise sequences in state Gtk.EventSequenceState.DENIED cannot turn back to a not denied state. With these rules the lifetime of an event sequence is constrained to the next four \nNote Due to event handling ordering it may be unsafe to set the state on another gesture within a begin signal handler as the callback might be executed before the other gesture knows about the sequence. A safe way to perform this could be \nIf both gestures are in the same group just set the state on the gesture emitting the event the sequence will be already be initialized to the group s global state when the second gesture processes the event. \nParameters \na Gtk.Gesture \na Gdk.EventSequence \nthe sequence state \ntrue if sequence is handled by gesture and the state is changed successfully \nSince \n"});