fragment_downloaded_cb({"url": "gtkaccelmap.html#gtk_accel_map_add_entry", "fragment": "Gtk.AccelMap.add_entry \ngtk_accel_map_add_entry \nGtk.prototype.add_entry \nRegisters a new accelerator with the global accelerator map. This function should only be called once per accel_path with the canonical accel_key and accel_mods for this path. To change the accelerator during runtime programatically use Gtk.AccelMap.change_entry. \nSet accel_key and accel_mods to to request a removal of the accelerator. \nNote that accel_path string will be stored in a GLib.Quark. Therefore if you pass a static string you can save some memory by interning it first with GLib.intern_static_string. \nParameters \nvalid accelerator path \nthe accelerator key \nthe accelerator modifiers \nRegisters a new accelerator with the global accelerator map. This function should only be called once per accel_path with the canonical accel_key and accel_mods for this path. To change the accelerator during runtime programatically use gtk_accel_map_change_entry. \nSet accel_key and accel_mods to to request a removal of the accelerator. \nNote that accel_path string will be stored in a GQuark. Therefore if you pass a static string you can save some memory by interning it first with g_intern_static_string. \nParameters \nvalid accelerator path \nthe accelerator key \nthe accelerator modifiers \nRegisters a new accelerator with the global accelerator map. This function should only be called once per accel_path with the canonical accel_key and accel_mods for this path. To change the accelerator during runtime programatically use Gtk.prototype.change_entry. \nSet accel_key and accel_mods to to request a removal of the accelerator. \nNote that accel_path string will be stored in a GLib.Quark. Therefore if you pass a static string you can save some memory by interning it first with prototype.intern_static_string. \nParameters \nvalid accelerator path \nthe accelerator key \nthe accelerator modifiers \n"});