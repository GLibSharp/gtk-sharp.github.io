fragment_downloaded_cb({"url": "gtkdialog-h.html#gtk_dialog_run", "fragment": "Gtk.Dialog.Run \nBlocks in a recursive main loop until the dialog either emits the Response signal or is destroyed. If the dialog is destroyed during the call to Gtk.Dialog.Run Gtk.Dialog.Run returns Gtk.ResponseType.None. Otherwise it returns the response ID from the response signal emission. \nBefore entering the recursive main loop Gtk.Dialog.Run calls Gtk.Widget.Show on the dialog for you. Note that you still need to show any children of the dialog yourself. \nDuring Gtk.Dialog.Run the default behavior of DeleteEvent is disabled if the dialog receives delete_event it will not be destroyed as windows usually are and Gtk.Dialog.Run will return Gtk.ResponseType.DeleteEvent. Also during Gtk.Dialog.Run the dialog will be modal. You can force Gtk.Dialog.Run to return at any time by calling Gtk.Dialog.Response to emit the response signal. Destroying the dialog during Gtk.Dialog.Run is a very bad idea because your post run code won t know whether the dialog was destroyed or not. \nAfter Gtk.Dialog.Run returns you are responsible for hiding or destroying the dialog if you wish to do so. \nTypical usage of this function might be \nNote that even though the recursive main loop gives the effect of a modal dialog it prevents the user from interacting with other windows in the same window group while the dialog is run callbacks such as timeouts IO channel watches DND drops etc will be triggered during a Gtk.Dialog.Run call. \nresponse ID \n"});